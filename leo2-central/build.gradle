// Gradle dependencies/plugins
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        // cargo gradle plugin for remote delpoyment
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:1.+'
    }
}

//plugins {
//    id "com.ewerk.gradle.plugins.querydsl" version "1.0.4"
//}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'cargo'
apply plugin: 'application'
// IDEs
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '0.1'
mainClassName = "org.deku.leo2.rest.Main"

repositories {
    mavenCentral()
}

dependencies {
    // slf4j logging (eg. spring logs)
    compile 'org.slf4j:slf4j-jdk14:+'

    // Webservice
    // For various javax interfaces (eg. ServletContextListener)
    compile 'javax.servlet:javax.servlet-api:3.+'
    // jersey
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.+'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.+'
    // jackson JSON serializer
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.+'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.+'
    // jersey webservice container for local running/debugging
    // masc20150504. jersey-container-grizzly2-http is usually enough for running standalone
    // as long as all configuration is provided via WebserviceResourceConfig.
    // Still this would portentially allow us to run the entire servlet standalone
    // (also pulling in jersey-container-grizzly2-http)
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-servlet:2.+'
    // jersey spring extension
    compile 'org.glassfish.jersey.ext:jersey-spring3:2.+'

    // leo2 webservice dependencies
    compile project(':leo2-common')

    // persistence framework(s)
    // eclipselink
    compile 'org.eclipse.persistence:eclipselink:2.+'
    compile 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.+' // Eclipselink codegen/annotation processor

    // QueryDSL
    compile 'com.mysema.querydsl:querydsl-jpa:3.+'
    compile 'com.mysema.querydsl:querydsl-apt:3.+:jpa' // QueryDSL codegen/annotation processor
    // Required for QueryDSL codegen (only when implementing Spring's QueryDslJpaRepository)
    compile 'org.hibernate:hibernate-core:+'
    compile 'jaxen:jaxen:+'

    // Spring
    compile 'org.springframework.data:spring-data-jpa:1.8.0.RELEASE'
    compile 'org.springframework:spring-orm:4.+'
    compile 'org.springframework:spring-context:4.+'
    compile 'org.springframework:spring-web:4.+'

    // JSR-330
    compile 'javax.inject:javax.inject:1'

    // deltaspike data
//    compile 'org.apache.deltaspike.modules:deltaspike-data-module-api:+'
//    compile 'org.apache.deltaspike.modules:deltaspike-data-module-impl:+'

    compile 'org.jinq:jinq-jpa:+'

    // jdbc connector(s)
    compile 'mysql:mysql-connector-java:5.+'

    testCompile group: 'junit', name: 'junit', version: '4.+'
    // Webservice client libraries for test cases
    testCompile 'org.glassfish.jersey.core:jersey-client:2.+'
    testCompile 'org.glassfish.jersey.ext:jersey-proxy-client:2.+'
    testCompile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.+'
    testCompile project(':sx-common')
}

run {
    errorOutput = System.err
    standardOutput = System.out
    standardInput = System.in
}

// war plugin configuration
war {
}

// cargo plugin configuration
cargo {
    containerId = 'tomcat7x'
    port = 8080

    deployable {
        context = '/leo2'
    }

    remote {
        hostname = '10.0.10.10'
        username = 'tomcat'
        password = 'tomcat'
    }
}

// task dependencies
tasks.cargoDeployRemote.dependsOn(war)
tasks.cargoRedeployRemote.dependsOn(war)

// Required for eclipse modelgen to find xml resources (eg. persistence.xml)
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
compileJava.dependsOn(processResources)

// Location for generated sources
def generatedSources = "$projectDir/generated"
def generatedOutputDir = file("$generatedSources")

compileJava {
    doFirst {
        generatedOutputDir.exists() || generatedOutputDir.mkdirs()
        // Tell javac about the generated sources location
        options.compilerArgs = [
                '-s', "${generatedSources}"
        ]
    }
}

// Add generated sources to a separate sourceset, so IDEs can see them
// (Adding sources to main/java instead will cause subsequent builds to fail)
sourceSets {
    generated {
        java {
            srcDirs += generatedOutputDir
        }
    }
}


