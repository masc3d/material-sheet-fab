// Gradle dependencies/plugins
buildscript {
    ext {
        v_jooq = "3.+"
        v_jersey = "2.+"
        v_jackson = "2.+"
        v_hk2 = "2.+"
        v_eclipselink = "2.+"
        v_spring = "4.+"
        v_querydsl = "3.+"
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        // cargo gradle plugin for remote delpoyment
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:1.+'

        // jooq codegen gradle plugin
        classpath 'com.github.ben-manes:gradle-jooq-plugin:+'

        // override jooq dependencies of gradle-jooq-plugin with desired version
        classpath("org.jooq:jooq-codegen:$v_jooq") {
            force: true
        }
        classpath("org.jooq:jooq-meta:$v_jooq") {
            force: true
        }

        // mysql jdbc connector
        classpath 'mysql:mysql-connector-java:5.+'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "1.2.1"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'cargo'
apply plugin: 'application'
apply plugin: 'jooq'
// IDEs
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
version = '0.1'
mainClassName = "org.deku.leo2.central.Main"

repositories {
    mavenCentral()
}

dependencies {
    // leo2 webservice dependencies
    compile project(':leo2-common')
    compile project(':sx-common')

    // slf4j logging (eg. spring logs)
    compile "org.slf4j:slf4j-jdk14:+"
    // log4j logging (required by eclipse codegen)
    compile "log4j:log4j:+"

    // Webservice
    // For various javax interfaces (eg. ServletContextListener)
    compile 'javax.servlet:javax.servlet-api:3.+'
    // jersey
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$v_jersey"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$v_jersey"
    // jersey spring extension
    compile "org.glassfish.jersey.ext:jersey-spring3:$v_jersey"

    compile "org.eclipse.jetty.aggregate:jetty-all:9.+"

    // jackson JSON serializer
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$v_jackson"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson"

    // persistence framework(s)
    // eclipselink
    compile "org.eclipse.persistence:eclipselink:$v_eclipselink"
    // Eclipselink codegen/annotation processor
    compile "org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:$v_eclipselink"
    // Need for codegen under specific circumstances (implementing some spring repository types)
    providedCompile "org.hibernate:hibernate-core:+"
    providedCompile "jaxen:jaxen:+"

    // QueryDSL
    compile "com.mysema.querydsl:querydsl-jpa:$v_querydsl"
    compile "com.mysema.querydsl:querydsl-apt:$v_querydsl:jpa" // QueryDSL codegen/annotation processor

    // Jooq
    compile "org.jooq:jooq:$v_jooq"

    // Spring
    compile 'org.springframework.data:spring-data-jpa:1.8.0.RELEASE'

    // JSR-330
    compile 'javax.inject:javax.inject:1'

    // deltaspike data
//    compile 'org.apache.deltaspike.modules:deltaspike-data-module-api:+'
//    compile 'org.apache.deltaspike.modules:deltaspike-data-module-impl:+'

    compile 'org.jinq:jinq-jpa:+'

    // jdbc connector(s)
    compile 'mysql:mysql-connector-java:5.+'

    // json doc
    compile 'com.wordnik:swagger-jersey2-jaxrs:+'

    // Test dependencies
    testCompile group: 'junit', name: 'junit', version: '4.+'
    // Webservice client libraries for test cases
    testCompile "org.glassfish.jersey.core:jersey-client:$v_jersey"
    testCompile "org.glassfish.jersey.ext:jersey-proxy-client:$v_jersey"
    testCompile "org.glassfish.jersey.media:jersey-media-json-jackson:$v_jersey"

    testCompile project(':sx-common')
}

run {
    errorOutput = System.err
    standardOutput = System.out
    standardInput = System.in
}

// war plugin configuration
war {
    // Jetty breaks tomcat deployment.
    // Seems to attempt to start some kind of component within jetty and fails with LifecycleException
    rootSpec.exclude("**/jetty*.jar")
    rootSpec.exclude("**/javax.servlet-api*.jar")
}

// cargo plugin configuration
cargo {
    containerId = 'tomcat7x'
    port = 8080

    deployable {
        context = '/leo2'
    }

    remote {
        hostname = '10.0.10.10'
        username = 'tomcat'
        password = 'tomcat'
    }
}

// task dependencies
tasks.cargoDeployRemote.dependsOn(war)
tasks.cargoRedeployRemote.dependsOn(war)

// Required for eclipse modelgen to find xml resources (eg. persistence.xml)
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
compileJava.dependsOn(processResources)

// Location for generated sources
// Directory for apt must be dedicated (no other generators may write here)
// otherwise triggering javac bug https://bugs.openjdk.java.net/browse/JDK-8062800
def srcdir_apt = file("$projectDir/src/generated/apt")
def srcdir_jooq = file("$projectDir/src/generated/jooq")

compileJava {
    doFirst {
        // Source dir must exist
        srcdir_apt.exists() || srcdir_apt.mkdirs()
        // Tell javac about the generated sources location
        options.compilerArgs = [
                '-s', srcdir_apt.toString()
        ]
    }
}

// Add generated sources to a separate sourceset, so IDEs can see them
// (Adding sources to main/java instead will cause subsequent builds to fail)
sourceSets {
    generated {
        java {
            srcDirs += srcdir_apt
        }
    }
}

jooq {
    jdbc {
        url 'jdbc:mysql://10.0.10.10:3306'
        driver 'com.mysql.jdbc.Driver'
        user 'root'
        password 'root'
    }
    generator {
        database {
            name 'org.jooq.util.mysql.MySQLDatabase'
            inputSchema 'dekuclient'

            includes 'tbldepotliste'
            //excludes '.*'

            // masc20140916. (almost) all tables
            //includes '.*'
            //excludes 'tbl_auftrag_info'
        }

        target {
            packageName 'org.deku.leo2.central.entities.jooq'
            directory srcdir_jooq.toString()
        }
    }
}
//tasks.generateJooq.outputs.upToDateWhen { false }

configurations.all {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()

        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson"
        force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:$v_jackson"
        force "com.fasterxml.jackson.core:jackson-annotations:$v_jackson"
        force "com.fasterxml.jackson.core:jackson-core:$v_jackson"
        force "com.fasterxml.jackson.core:jackson-databind:$v_jackson"
        force "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:$v_jackson"
        force "com.google.guava:guava:18.0"
        force "org.javassist:javassist:3.+"
        force "org.glassfish.hk2:hk2:$v_hk2"
        force "org.glassfish.hk2:hk2-api:$v_hk2"
        force "org.glassfish.hk2:hk2-locator:$v_hk2"
        force "org.glassfish.hk2:spring-bridge:$v_hk2"
        force "org.glassfish.hk2.external:javax.inject:$v_hk2"
        force "org.glassfish.jersey.containers:jersey-container-servlet-core:$v_jersey"
        force "org.glassfish.jersey.core:jersey-server:$v_jersey"
        force "org.springframework:spring-web:$v_spring"
        force "org.springframework:spring-core:$v_spring"
        force "org.springframework:spring-context:$v_spring"
        force "org.springframework:spring-orm:$v_spring"
        force "org.springframework:spring-beans:$v_spring"
        force "org.springframework:spring-tx:$v_spring"
        force "org.springframework:spring-aop:$v_spring"
        force "javax.servlet:javax.servlet-api:3.1.0"
        force "org.slf4j:slf4j-api:1.+"

        force "org.jooq:jooq-meta:$v_jooq"
        force "org.jooq:jooq-codegen:$v_jooq"
        force "org.apache.ant:ant:1.+"
        force "org.apache.ant:ant-launcher:1.+"
        force "xml-apis:xml-apis:1.+"

        force "org.jboss.logging:jboss-logging:3.+"
        force "org.jboss.logging:jboss-logging-annotations:1.+"
    }
}

// masc20150507. task prototypes
////copying all dependencies attached to 'compile' into a specific folder
//task copyAllDependencies(type: Copy) {
//    //referring to the 'compile' configuration
//    from configurations.compile
//    into 'allLibs'
//}
//
//configurations.all.each {
//    println "compile: $it"
//}
//
//sourceSets.main.compileClasspath.each {
//    println "ss: $it"
//}
