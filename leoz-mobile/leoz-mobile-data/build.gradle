import org.flywaydb.core.Flyway
import org.jooq.util.DefaultGeneratorStrategy
import org.jooq.util.Definition
import org.jooq.util.GenerationTool
import org.jooq.util.GeneratorStrategy
import org.jooq.util.sqlite.SQLiteDatabase
import org.jooq.util.jaxb.*

buildscript {
    ext {
        v_xerial = '3.8.11.2'
    }
    dependencies {
        classpath(
                "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin",
                "org.xerial:sqlite-jdbc:$v_xerial",
                "org.flywaydb:flyway-gradle-plugin:$v_flyway",
                // JOOQ
                "org.jooq:jooq:$v_jooq",
                "org.jooq:jooq-meta:$v_jooq",
                "org.jooq:jooq-codegen:$v_jooq",
        )
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.flywaydb.flyway'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def DB_FILENAME = 'leoz-mobile.db'
def DB_RESOURCES_DIR = new File(project.projectDir, 'src/main/resources/db')
def DB_DIR = new File(project.projectDir, 'db')
def DB_FILE = new File(DB_DIR, DB_FILENAME)

def FLYWAY_MIGRATION_DIR = new File(DB_RESOURCES_DIR, 'migration')
def FLYWAY_TASK_GROUP = 'flyway'

def JDBC_DRIVER = 'org.sqlite.JDBC'
def JDBC_URL = "jdbc:sqlite:${DB_FILE}"

def GENERATED_DIR = file("${project.projectDir}/src/generated")


class Constants {
    static def JOOQ_PACKAGE_NAME = 'org.deku.leoz.android.data.jooq'
    static def JPA_PACKAGE_NAME = 'org.deku.leoz.android.data.jpa'
}

def JOOQ_GENERATED_DIR = new File(GENERATED_DIR, 'jooq')
def JOOQ_PACKAGE_NAME = Constants.JOOQ_PACKAGE_NAME
def JPA_PACKAGE_NAME = Constants.JPA_PACKAGE_NAME

configurations {
    driver
}

dependencies {
    compile(
            fileTree(dir: 'libs', include: ['*.jar']),

            // javax.persistence
            "org.eclipse.persistence:javax.persistence:$v_javax_persistence",
    )

    driver(
            "org.xerial:sqlite-jdbc:$v_xerial",
    )
}

sourceSets {
    main {
        java {
            srcDirs += JOOQ_GENERATED_DIR
        }
    }
}

clean {
    doLast {
        GENERATED_DIR.deleteDir()
    }
}

flyway {
    driver = JDBC_DRIVER
    url = JDBC_URL
    locations = ["filesystem:${FLYWAY_MIGRATION_DIR}"]
}

task flywayMigrateWorkaround(group: FLYWAY_TASK_GROUP) << {
    DB_DIR.mkdirs()
    Flyway flyway = new Flyway();
    flyway.setLocations("filesystem:${FLYWAY_MIGRATION_DIR}");
    flyway.setDataSource("jdbc:sqlite:${DB_FILE}", "", "");
    flyway.migrate()
}

//region JOOQ
/**
 * JOOQ generator strategy
 */
public class CustomJooqGeneratorStrategy extends DefaultGeneratorStrategy {
    @Override
    String getJavaPackageName(Definition definition, GeneratorStrategy.Mode mode) {
        def packageName = super.getJavaPackageName(definition, mode)
        // Mangle package name for jpa pojos
        if (mode == GeneratorStrategy.Mode.POJO) {
            packageName = Constants.JPA_PACKAGE_NAME
        }
        return packageName
    }
}

/**
 * JOOQ generator configuration
 */
def jooqConfiguration = new Configuration()
        .withJdbc(
        new Jdbc()
                .withDriver(JDBC_DRIVER)
                .withUrl(JDBC_URL))
        .withGenerator(
        new Generator()
                .withGenerate(
                new Generate()
                        .withRecords(false)
                        .withDaos(false)
                        .withPojos(true)
                        .withPojosEqualsAndHashCode(true)
                        .withJpaAnnotations(true)
                        .withFluentSetters(false))
                .withStrategy(new Strategy()
                .withName(CustomJooqGeneratorStrategy.class.canonicalName))
                .withDatabase(
                new Database()
                        .withName(SQLiteDatabase.class.canonicalName)
                        .withInputSchema('')
                 )
                .withTarget(
                new Target()
                        .withPackageName(JOOQ_PACKAGE_NAME)
                        .withDirectory(JOOQ_GENERATED_DIR.toString())))

/**
 * Task generating JOOQ and JPA classes.
 * TODO: jooq plugin doesn't work correctly with customized generator strategy (class loading issue)
 */
task jooqGenerate(group: 'jooq') {
    dependsOn tasks.flywayMigrateWorkaround
    mustRunAfter tasks.flywayMigrateWorkaround

    inputs.dir FLYWAY_MIGRATION_DIR
    outputs.dir JOOQ_GENERATED_DIR

    doFirst {
        JOOQ_GENERATED_DIR.deleteDir()
    }

    doLast {
        GenerationTool.generate(jooqConfiguration)

        // Remove JOOQ classes (didn't find a way to disable this via `jooqConfiguration`
        new File(JOOQ_GENERATED_DIR, JOOQ_PACKAGE_NAME.replace('.', '/')).deleteDir()
    }
}
// Dependencies
tasks.compileJava {
    dependsOn tasks.jooqGenerate
    mustRunAfter tasks.jooqGenerate
}
//endregion