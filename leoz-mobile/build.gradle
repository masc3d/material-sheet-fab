import java.lang.management.ManagementFactory

import sx.packager.BundleRepository
import sx.ssh.SshTunnelProvider
import sx.ssh.SshHost
import sx.rsync.Rsync

// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply from: '../versions.gradle'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url '../leoz-build/repo'
        }
    }

    dependencies {
        classpath "sx:sx-ssh:0.1"
        classpath "sx:sx-packager-gradle:0.1"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

subprojects {
    buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }

    }

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'project-report'

    // Set boot classpath for all subprojects (eliminates warning in conjunction with setting sourceCompatibility)
    tasks.withType(JavaCompile) {
        options.bootClasspath = ManagementFactory.getRuntimeMXBean().bootClassPath
    }

    // Setup common sx-packager-gradle plugin properties for all subprojects
    plugins.withType(sx.packager.gradle.PackagerPlugin).whenPluginAdded {
        SshTunnelProvider mySshTunnelProvider = new SshTunnelProvider(
                new kotlin.ranges.IntRange(13300, 13350),
                new SshHost(
                        "",
                        13003,
                        "leoz",
                        "MhWLzHv0Z0E9hy8jAiBMRoO65qDBro2JH1csNlwGI3hXPY8P8NOY3NeRDHrApme8"))

        packager {
            sshTunnelProvider = mySshTunnelProvider
            bundleRepository = new BundleRepository(
                    new Rsync.URI("rsync://leoz@leoz.derkurier.de:13002/bundles"),
                    '2FBVQsfQqZOgpbSSipdZuatQCuaogyfYc9noFYRZO6gz3TwGRDLDiGXkRJ70yw5x',
                    mySshTunnelProvider)

            releaseBasePath = project.rootDir.toPath()
                    .parent
                    .resolve('release')
                    .toFile()

            nativePlatformDir = project.rootDir.toPath()
                    .parent
                    .resolve('libs')
                    .resolve('sx-rsync')
                    .resolve('platform')
                    .toFile()
        }
    }
}

task clean(type: Delete) {
    group 'build'
    delete rootProject.buildDir
}