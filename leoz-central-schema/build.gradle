import org.flywaydb.gradle.FlywayExtension
import org.flywaydb.gradle.task.FlywayInfoTask
import org.flywaydb.gradle.task.FlywayBaselineTask
import org.flywaydb.gradle.task.FlywayMigrateTask
import org.flywaydb.gradle.task.FlywayRepairTask
import org.flywaydb.gradle.task.FlywayValidateTask

ext {
    instances = [:]
}

if (file('local.gradle').exists())
    apply from: 'local.gradle'

ext {
    // Flyway instances. A set of flyway tasks will be created for each one.
    instances += [
            // Integration
            leox: [
                    url     : 'jdbc:mysql://leox.derkurier.de:3320?useSSL=false',
                    user    : 'root',
                    password: 'dekudb',
                    target  : 13
            ],
            // Production/live
            live: [
                    url     : 'jdbc:mysql://10.3.73.63:3306?useSSL=false',
                    user    : 'migration',
                    password: 'dekudb',
                    baseline: 2,
                    target  : 13
            ],
            // Test 61
            test61: [
                    url     : 'jdbc:mysql://10.3.73.61:3306?useSSL=false',
                    user    : 'migration',
                    password: 'dekudb',
                    target  : 2
            ]
    ]
}

buildscript {
    ext {
        v_flyway = '4.1.2'
        v_mysql = '5.1.40'

        DB_MYSQL_JDBC_DRIVER = 'com.mysql.jdbc.Driver'
        FLYWAY_MIGRATION_DIR = new File(project.projectDir, 'db/migration')
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // mysql jdbc connector
        classpath "mysql:mysql-connector-java:$v_mysql"
        // Flyway
        classpath "org.flywaydb:flyway-gradle-plugin:$v_flyway"
    }
}

apply plugin: 'org.flywaydb.flyway'

// Remove standard flyway tasks
tasks.remove(tasks.flywayBaseline)
tasks.remove(tasks.flywayClean)
tasks.remove(tasks.flywayInfo)
tasks.remove(tasks.flywayMigrate)
tasks.remove(tasks.flywayRepair)
tasks.remove(tasks.flywayValidate)

/**
 * Common flyway extension/parameters
 * @return
 */
def createFlywayExtension(properties) {
    def extension = new FlywayExtension()
    extension.driver = ext.DB_MYSQL_JDBC_DRIVER
    extension.schemas = ['dekuclient', 'dekutmp']
    extension.locations = ["filesystem:${ext.FLYWAY_MIGRATION_DIR}"]
    extension.url = properties['url']
    extension.user = properties['user']
    extension.password = properties['password']
    extension.target = properties['target']
    extension.baselineVersion = properties['baseline']
    return extension
}

ext.instances.each { k, properties ->
    def name = k.capitalize()
    task "flyway${name}Info"(type: FlywayInfoTask) {
        extension = createFlywayExtension(properties)
    }

    task "flyway${name}Repair"(type: FlywayRepairTask) {
        extension = createFlywayExtension(properties)
    }

    task "flyway${name}Migrate"(type: FlywayMigrateTask) {
        extension = createFlywayExtension(properties)
    }

    task "flyway${name}Validate"(type: FlywayValidateTask) {
        extension = createFlywayExtension(properties)
    }

    if (properties['baseline'] != null) {
        task "flyway${name}Baseline"(type: FlywayBaselineTask) {
            extension = createFlywayExtension(properties)
        }
    }
}