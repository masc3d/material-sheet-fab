import org.deku.gradle.PackagerPlugin

buildscript {
    ext {
        v_mysql = '5.1.40'
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"

        // JOOQ plugin
        classpath "nu.studer:gradle-jooq-plugin:2.0.2"
        classpath "org.jooq:jooq:$v_jooq"
        classpath "org.jooq:jooq-meta:$v_jooq"
        classpath "org.jooq:jooq-codegen:$v_jooq"
        // Flyway
        classpath "org.flywaydb:flyway-gradle-plugin:$v_flyway"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'nu.studer.jooq'
apply plugin: 'org.flywaydb.flyway'
apply plugin: PackagerPlugin

sourceCompatibility = 1.8
version = '0.61-SNAPSHOT'
mainClassName = "org.deku.leoz.central.Main"

// Database constants
def DB_MYSQL_JDBC_DRIVER = 'com.mysql.jdbc.Driver'
def DB_MYSQL_JDBC_URL = 'jdbc:mysql://10.0.10.10:3306?useSSL=false'

dependencies {
    // leoz webservice dependencies
    compile(
            project(':libs:sx-common'),
            project(':leoz-common'),
            project(':leoz-node'),

            // Kotlin
            "org.jetbrains.kotlin:kotlin-runtime:$v_kotlin",
            "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin",

            // db
            "mysql:mysql-connector-java:$v_mysql",

            // jooq
            "org.jooq:jooq:$v_jooq"
    )

    testCompile(
            project(':libs:sx-common'),
            "junit:junit:$v_junit",
            // webservice client libraries for test cases
            "org.jboss.resteasy:resteasy-client:$v_resteasy",
            "org.springframework:spring-test:$v_spring",
            "org.springframework.boot:spring-boot-starter-test:$v_springboot",
    )

    jooqRuntime(
            "mysql:mysql-connector-java:$v_mysql",
            "org.slf4j:slf4j-api:$v_slf4j"
    )
}

// SQL migrations (used for flyway eg.)
def FLYWAY_MIGRATION_DIR = new File(project.rootDir, 'leoz-central-schema/sql')

flyway {
    driver = DB_MYSQL_JDBC_DRIVER
    url = DB_MYSQL_JDBC_URL
    user = 'root'
    password = 'root'
    schemas = ['dekuclient']
    locations = ["filesystem:${FLYWAY_MIGRATION_DIR}"]
}

// Location for generated sources
// Directory for apt must be dedicated (no other generators may write here)
// otherwise triggering javac bug https://bugs.openjdk.java.net/browse/JDK-8062800
def JOOQ_GENERATED_DIR = file("$projectDir/src/generated/jooq")

jooq {
    main(sourceSets.main) {
        jdbc {
            url = DB_MYSQL_JDBC_URL
            driver = DB_MYSQL_JDBC_DRIVER
            user = 'root'
            password = 'root'
        }
        generator {
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'dekuclient'

                includes = 'tbldepotliste|mst_.*|sys_.*'
                //excludes '.*'

                // masc20140916. (almost) all tables
                //includes '.*'
                //excludes 'tbl_auftrag_info'
            }

            target {
                packageName = 'org.deku.leoz.central.data.jooq'
                directory = JOOQ_GENERATED_DIR.toString()
            }
        }
    }
}
// JOOQ generation depends on schema migration
tasks.generateMainJooqSchemaSource {
    dependsOn tasks.flywayMigrate
}

tasks.flywayMigrate {
    // TODO: doFirst is always executed even if task is uptodate, which will in turn make generation task run on every build. it's only remedied by the build task detecting there's no actual changes, preventing repeated compilation
    // TODO: attaching (an even empty) doLast action to an existing task will prevent the task from being uptodate ever (why?, possibly a gradle bug)
    doFirst {
        JOOQ_GENERATED_DIR.deleteDir()
    }
}

clean {
    doFirst {
        JOOQ_GENERATED_DIR.deleteDir()
    }
}

run {
    errorOutput = System.err
    standardOutput = System.out
    standardInput = System.in
}

// Required for eclipse modelgen to find xml resources (eg. persistence.xml)
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
compileJava.dependsOn(processResources)

tasks.classes.dependsOn(copySxPlatformDirToBuild)
tasks.classes.dependsOn(copyGlobalPlatformDirToBuild)
tasks.classes.dependsOn(tasks.flywayMigrate)
tasks.compileJava.dependsOn(tasks.generateMainJooqSchemaSource)
tasks.compileKotlin.dependsOn(tasks.generateMainJooqSchemaSource)

distributions {
    main {
        contents {
            from projectBuildSupplementalsDir
        }
    }
}

// Packager task
packager {
    title = "Leoz Central"
    releaseBasePath = g_release_path
    osxIcon = g_osx_icon
    windowsIcon = g_windows_icon
    supplementalPlatformDirs(
            (projectBuildPlatformDir): (platformDirRelative)
    )
}
