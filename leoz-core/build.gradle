apply plugin: 'kotlin'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
    }
}

group = 'org.deku.leoz'
sourceCompatibility = 1.8
version = '1.0'

configurations {
    // TODO: custom `provided` configuration, as `compileOnly` doesn't work well with IntelliJ
    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name
        }
    }
    compile.extendsFrom provided
}

repositories {
    mavenCentral()
    jcenter()
}

//region Prototype test setup
test {
    useJUnit {
        includeCategories 'sx.junit.StandardTest'
    }
}

sourceSets {
    test {
        java {
            srcDirs += file('src/prototype/java')
        }
    }
}
//endregion

dependencies {
    compile(
            project(':sx-common'),
            project(':sx-jms'),
            project(':sx-rsync'),
            project(':sx-serialization'),
            project(':sx-discovery'),
            project(':sx-packager'),
            // Watchservice replacement for OSX
            project(':barbarywatchservice'),
            project(':leoz-common'),
            // Kotlin
            "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin",
            "org.jetbrains.kotlinx:kotlinx-support-jdk8:0.3",

            // Kodein
            "com.github.salomonbrys.kodein:kodein:$v_kodein",
            "com.github.salomonbrys.kodein:kodein-conf:$v_kodein",
            // logging
            "org.apache.commons:commons-lang3:$v_commons_lang",
            "ch.qos.logback:logback-classic:$v_logback",
            "org.slf4j:jcl-over-slf4j:$v_slf4j",
            // Guava
            "com.google.guava:guava:$v_guava",
            // Commons
            "commons-io:commons-io:$v_commons_io",
            // kryo
            "com.esotericsoftware:kryo:4.0.0",
            "net.java.dev.jna:jna:$v_jna",
            "net.java.dev.jna:jna-platform:$v_jna",
            // YAML
            "org.yaml:snakeyaml:$v_snakeyaml",
    )

    provided(
            // Persistence
            "org.eclipse.persistence:javax.persistence:$v_javax_persistence",

            // Swagger for json doc
            "io.swagger:swagger-annotations:$v_swagger",

            // Jackson
            "com.fasterxml.jackson.core:jackson-databind:$v_jackson",
            "com.fasterxml.jackson.core:jackson-annotations:$v_jackson",

            // ActiveMQ
            "org.apache.activemq:activemq-broker:$v_activemq",
            "org.apache.activemq:activemq-kahadb-store:$v_activemq",
            "org.apache.activemq:activemq-jms-pool:$v_activemq",
            "org.apache.activemq:activemq-jaas:$v_activemq",
            "org.apache.activemq:activemq-mqtt:$v_activemq",
            dependencies.create("org.apache.activemq:activemq-http:$v_activemq") {
                exclude group: 'org.springframework'
                exclude group: 'org.apache.activemq', module: 'activemq-spring'
                exclude group: 'org.eclipse.jetty.aggregate'
            },
            // Artemis
            dependencies.create("org.apache.activemq:artemis-jms-server:$v_artemis") {
                // Conflicts with jms 1.1 which is required by activemq 5.x
                exclude group: 'org.apache.activemq', module: 'artemis-jms-client'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_2.0_spec'
            },
            dependencies.create("org.apache.activemq:artemis-jms-client:$v_artemis") {
                // Conflicts with jms 1.1 which is required by activemq 5.x
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_2.0_spec'
            },
            dependencies.create("org.apache.activemq:artemis-amqp-protocol:$v_artemis") {
                exclude group: 'org.apache.activemq', module: 'artemis-jms-client'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_2.0_spec'
            },
            // HTTP support
            "org.apache.httpcomponents:httpclient:$v_apache_httpclient",
            "com.thoughtworks.xstream:xstream:$v_xstream",

            // Spring
            "org.springframework:spring-jms:$v_spring",

            // RESTeasy client
            "org.jboss.resteasy:resteasy-client:$v_resteasy",
            "org.jboss.resteasy:resteasy-jackson2-provider:$v_resteasy",

            // Jersey REST client
            "org.glassfish.jersey.core:jersey-client:$v_jersey",
            "org.glassfish.jersey.ext:jersey-proxy-client:$v_jersey"
    )

    testCompile(
            "junit:junit:$v_junit",
            "ch.qos.logback:logback-classic:1.2.1",
            // webservice client libraries for test cases
            "org.jboss.resteasy:resteasy-client:$v_resteasy",
            // jackson JSON serializer
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$v_jackson",
            "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson"
    )
}

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group.startsWith('com.fasterxml.jackson')) {
                details.useVersion v_jackson
            }
        }
    }
}
