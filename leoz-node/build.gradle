import groovy.io.FileType
import org.apache.commons.lang3.ClassUtils
import org.apache.openjpa.jdbc.meta.ReverseMappingTool
import org.apache.openjpa.jdbc.schema.Column
import org.apache.openjpa.jdbc.schema.SchemaTool
import org.deku.gradle.PackagerPlugin
import org.jboss.forge.roaster.Roaster
import org.jboss.forge.roaster.model.source.FieldSource
import org.jboss.forge.roaster.model.source.JavaClassSource
import org.jboss.forge.roaster.model.source.PropertySource

import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Types

buildscript {
    ext {
        v_aspectj = '1.8.9'
        v_querydsl = '4.1.4'
        v_openjpa = '2.4.1'
        v_roaster = '2.19.1.Final'
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
        // Flyway
        classpath "org.flywaydb:flyway-gradle-plugin:$v_flyway"
        // OpenJPA/Entitygen
        classpath "org.apache.openjpa:openjpa-all:$v_openjpa"
        classpath "com.h2database:h2:1.4.192"
        // Roaster
        classpath "org.jboss.forge.roaster:roaster-api:$v_roaster"
        classpath "org.jboss.forge.roaster:roaster-jdt:$v_roaster"
        classpath "org.apache.commons:commons-lang3:$v_commons_lang"
        // Agent plugin
        classpath "gradle.plugin.com.zoltu:application-agent:1.0.12"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'
//apply plugin: "com.zoltu.application-agent"
apply plugin: PackagerPlugin

sourceCompatibility = 1.8
version = '0.58-RELEASE'
mainClassName = "org.deku.leoz.node.Main"

// Required for eclipse modelgen to find xml resources (eg. persistence.xml)
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
compileJava.dependsOn(processResources)

// Location for generated sources
// Directory for apt must be dedicated (no other generators may write here)
// otherwise triggering javac bug https://bugs.openjdk.java.net/browse/JDK-8062800
def srcdir_apt = file("$projectDir/build/generated/source/kapt/main")

kapt {
    generateStubs = true
}

idea {
    module {
        sourceDirs += srcdir_apt
    }
}

dependencies {
    // leoz webservice dependencies
    compile(
            project(':libs:sx-common'),
            project(':leoz-common'),

            // Kotlin
            "org.jetbrains.kotlin:kotlin-runtime:$v_kotlin",
            "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin",

            // spring
            "org.springframework.data:spring-data-jpa:$v_spring_data_jpa",
            "org.springframework.data:spring-data-commons:$v_spring_data_commons",
            "org.springframework:spring-web:$v_spring",
            //"org.springframework:spring-aspects"

            // spring boot
            "org.springframework.boot:spring-boot-starter:$v_springboot",
            dependencies.create("org.springframework.boot:spring-boot-starter-web:$v_springboot") {
                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
            },
            "org.springframework.boot:spring-boot-starter-undertow:$v_springboot",
            "org.springframework.boot:spring-boot-actuator:$v_springboot",

            // logging
            "org.slf4j:jul-to-slf4j:$v_slf4j",
            "org.slf4j:log4j-over-slf4j:$v_slf4j",
            "ch.qos.logback:logback-classic:$v_logback",

            // webservice
            // for various javax interfaces (eg. ServletContextListener)
            "javax.servlet:javax.servlet-api:$v_javax_servlet",
            // jaxrs/resteasy
            "org.jboss.resteasy:resteasy-jaxrs:$v_resteasy",
            "org.jboss.resteasy:resteasy-spring:$v_resteasy",
            "org.jboss.resteasy:resteasy-jackson2-provider:$v_resteasy",

            // jackson JSON serializer
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$v_jackson",
            "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson",

            // persistence framework(s)
            // eclipselink
            "org.eclipse.persistence:eclipselink:2.6.4",

            // queryDSL
            "com.querydsl:querydsl-core:$v_querydsl",
            "com.querydsl:querydsl-jpa:$v_querydsl",
            "com.querydsl:querydsl-collections:$v_querydsl",

            "org.flywaydb:flyway-core:4.0.3",

            // JSR-330
            "javax.inject:javax.inject:1",

            // databases
            "com.h2database:h2:1.4.192",

            // persistence
            "org.eclipse.persistence:javax.persistence:$v_javax_persistence",

            // ActiveMQ
            "org.apache.activemq:activemq-broker:$v_activemq",
            "org.apache.activemq:activemq-kahadb-store:$v_activemq",
            "org.apache.activemq:activemq-jms-pool:$v_activemq",
            "org.apache.activemq:activemq-jaas:$v_activemq",
            "org.apache.activemq:activemq-mqtt:$v_activemq",
            dependencies.create("org.apache.activemq:activemq-http:$v_activemq") {
                exclude group: 'org.springframework'
                exclude group: 'org.apache.activemq', module: 'activemq-spring'
                exclude group: 'org.eclipse.jetty.aggregate'
            },
            // http support
            "org.apache.httpcomponents:httpclient:$v_apache_httpclient",
            "com.thoughtworks.xstream:xstream:$v_xstream",

            // Artemis
            "org.apache.activemq:artemis-jms-server:1.4.0",

            // ssh support
            "org.apache.sshd:sshd-core:$v_sshd",

            // spring
            "org.springframework:spring-jms:$v_spring",
            "org.springframework:spring-instrument:$v_spring",
            "org.springframework:spring-aspects:$v_spring",

            // json doc
            "io.swagger:swagger-jaxrs:$v_swagger",
            "org.javassist:javassist:$v_javassist",

            // hawt.io
            "io.hawt:hawtio-springboot:1.4.65",
            "org.jolokia:jolokia-spring:1.3.4",

            // serialization
            "com.esotericsoftware:kryo:$v_kryo",

            // TODO: for testing jinq
            "org.jinq:jinq-jpa:+",

            // TODO: for testing jsch
            "com.jcraft:jsch:+",

            // TODO: For testing aspectj proxies with spring
            "org.aspectj:aspectjrt:$v_aspectj",
            "org.aspectj:aspectjweaver:$v_aspectj",

            // TODO: for testing vaadin
            "com.vaadin:vaadin-spring-boot:1.0.0",
            "com.vaadin:vaadin-client:$v_vaadin",
            "com.vaadin:vaadin-client-compiled:$v_vaadin",
            "com.vaadin:vaadin-widgets:$v_vaadin",
            "com.vaadin:vaadin-themes:$v_vaadin",
    )

//    agent(
//            "org.springframework:spring-instrument:$v_spring"
//    )

    // QueryDSL codegen/annotation processor
    kapt(
            "com.querydsl:querydsl-apt:$v_querydsl:jpa",
            "org.eclipse.persistence:javax.persistence:$v_javax_persistence")

    testCompile(
            "junit:junit:$v_junit",

            // webservice client libraries for test cases
            "org.jboss.resteasy:resteasy-client:$v_resteasy",
            "org.springframework:spring-test:$v_spring",
            "org.springframework.boot:spring-boot-starter-test:$v_springboot",

            project(':libs:sx-common')
    )

    compile(
            "org.jboss.forge.roaster:roaster-api:$v_roaster",
            "org.jboss.forge.roaster:roaster-jdt:$v_roaster"
    )
}

run {
    errorOutput = System.err
    standardOutput = System.out
    standardInput = System.in
}

//jar {
//    manifest {
//        attributes(
//            'Premain-Class': 'org.springframework.instrument.InstrumentationSavingAgent',
//            'Agent-Class': 'org.springframework.instrument.InstrumentationSavingAgent',
//            'Can-Redefine-Classes': 'true',
//            'Can-Retransform-Classes': 'true',
//            'Can-Set-Native-Method-Prefix': 'false'
//        )
//    }
//}

distributions {
    main {
        contents {
            from projectBuildSupplementalsDir
        }
    }
}

packager {
    title = "Leoz Node"
    releaseBasePath = g_release_path
    osxIcon = g_osx_icon
    windowsIcon = g_windows_icon
    supplementalPlatformDirs(
            (projectBuildPlatformDir): (platformDirRelative)
    )
}

// Custom tasks

// Include sx platform/binaries
tasks.classes.dependsOn(copySxPlatformDirToBuild)
// Include leoz global platform/binaries
tasks.classes.dependsOn(copyGlobalPlatformDirToBuild)

/**
 * Task for syncing webapp content to build/classes
 */
task copyWebapp(type: Sync) {
    from 'src/main/webapp'
    into 'build/classes/main/webapp'
}
tasks.compileJava.dependsOn(copyWebapp)

/**
 * Task for syncing vaadin webapp content to build/classes
 */
task copyVaadinWebapp(type: Sync) {
    from 'src/main/webapp/VAADIN'
    into 'build/classes/main/VAADIN'
}
tasks.compileJava.dependsOn(copyVaadinWebapp)

// Database constants
def DB_DIR = new File(project.projectDir, 'db')
def DB_H2_JDBC_DRIVER = 'org.h2.Driver'
def DB_H2_JDBC_URL = "jdbc:h2:${DB_DIR}/leoz;database_to_upper=false"

// SQL migrations (used for flyway eg.)
def PROJECT_DB_DIR = new File(project.projectDir, 'src/main/resources/db')
def FLYWAY_MIGRATION_DIR = new File(PROJECT_DB_DIR, 'migration')

// Tables file which contains mapping to @Serializable uids
def DB_TABLES_XML = new File(PROJECT_DB_DIR, "tables.xml")

flyway {
    driver = DB_H2_JDBC_DRIVER
    url = DB_H2_JDBC_URL
    locations = ["filesystem:${FLYWAY_MIGRATION_DIR}"]
}
tasks.clean.dependsOn(tasks.flywayClean)

// JPA class generation

def JPA_GENERATED_PACKAGE = "org.deku.leoz.node.data.entities"
def JPA_GENERATED_DIR = file("${project.projectDir}/src/generated/jpa")
def JPA_TASK_GROUP = "jpa"

//region OpenJPA
def OPENJPA_PERSISTENCE_XML = file("db/openjpa-persistence.xml")
def OPENJPA_SCHEMA_XML = file('db/openjpa-schema.xml')

sourceSets {
    main.java.srcDir JPA_GENERATED_DIR
}

// OpenJPA properties
System.setProperty("openjpa.ConnectionDriverName", DB_H2_JDBC_DRIVER)
System.setProperty("openjpa.ConnectionURL", DB_H2_JDBC_URL)
System.setProperty("openjpa.Log", "DefaultLevel=INFO, Tool=INFO")
System.setProperty("openjpa.jdbc.DBDictionary", "H2Dictionary")

/**
 * Modified openjpa H2 dictionary
 */
class H2Dictionary extends org.apache.openjpa.jdbc.sql.H2Dictionary {
    public H2Dictionary() {
        this.supportsNullTableForGetPrimaryKeys = false
        this.supportsNullTableForGetIndexInfo = false

        // OpenJPA contains a bug, where quoted column names are not escaped in generated @Column annotation.
        // This will break the flyway "schema_version" column, but it's not used via jpa anyhow.
        this.schemaCase = SCHEMA_CASE_PRESERVE
    }

    @Override
    protected Column newColumn(ResultSet colMeta) throws SQLException {
        def c = super.newColumn(colMeta)

        // Map `BOOLEAN` to `BIT` as `BOOLEAN` is not in supported type map
        if (c.type == Types.BOOLEAN) {
            c.type = Types.BIT
            c.javaType = Types.BOOLEAN
        }
        return c
    }

    @Override
    int getPreferredType(int type) {
        // Simply return the type as-is, circumvents base class Bit/Boolean mapping
        // which causes boolean fields to be mapped as BLOB/byte[]
        return type
    }
}

/**
 * Task for generating openjpa schema
 */
task openJpaGenerateSchema(dependsOn: [flywayMigrate]) {
    inputs.dir FLYWAY_MIGRATION_DIR
    outputs.files OPENJPA_SCHEMA_XML.toString()

    doFirst {
        JPA_GENERATED_DIR.deleteDir()
    }

    doLast {
        def params = [
                "-properties", OPENJPA_PERSISTENCE_XML,
                "-action", "reflect",
                "-file", OPENJPA_SCHEMA_XML
        ] as String[]

        print(params)
        SchemaTool.main(params)
    }
}

task jpaClean(group: JPA_TASK_GROUP) << {
    OPENJPA_SCHEMA_XML.delete()
    JPA_GENERATED_DIR.deleteDir()
}
tasks.clean.dependsOn(tasks.jpaClean)

/**
 * Performs post-processing on openjpa-generated entity classes.
 * @return
 */
def openJpaPostProcess(File tablesXmlFile, File sourceDir) {
    def tables = new XmlSlurper().parse(tablesXmlFile)

    def tableUidMap = new HashMap<String, String>()
    tables.table.each {
        tableUidMap[it.@name.toString()] = it
    }

    def idClassUidByEntityClassName = new HashMap<String, String>()

    sourceDir.eachFileRecurse(FileType.FILES, {
        def jtype = Roaster.parse(it)
        def jsource = (JavaClassSource)jtype

        def tableAnnotation = jsource.annotations.find {
            it.qualifiedName == javax.persistence.Table.canonicalName
        }

        def idClassAnnotation = jsource.annotations.find {
            it.qualifiedName == javax.persistence.IdClass.canonicalName
        }

        String uid
        if (tableAnnotation != null) {
            def tableName = tableAnnotation.values.find { it.name == "name" }.stringValue

            // Skip flyway schema table
            if (tableName == "schema_version")
                return

            // Determine table uid
            def tableEntry = tableUidMap[tableName]
            if (tableEntry == null)
                throw new IllegalStateException("Table [${tableName}] is missing entry in [${DB_TABLES_XML}]")

            uid = tableEntry.@uid.toString()

            if (idClassAnnotation != null) {
                def idClassName = idClassAnnotation.literalValue
                def idClassUid = tableEntry.@pkuid.toString()
                idClassUidByEntityClassName[idClassName] = idClassUid
            }
        } else {
            uid = idClassUidByEntityClassName[jsource.canonicalName]
            if (uid == null)
                throw new IllegalStateException("Missing uid for id class [${jsource.canonicalName}]")
        }

        // Set @Serializable annotation if it's not there already
        if (jsource.annotations.find {
            it.qualifiedName == sx.io.serialization.Serializable.canonicalName
        } == null) {
            jsource
                    .addAnnotation()
                    .setName(sx.io.serialization.Serializable.canonicalName)
                    .setLiteralValue("uid", uid + "L")
        }

        // EclipseLink currently does not support primitive @Id fields
        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=415027
        // Thus changing primitve @Id fields and referring properties to their wrapped object type counterpart
        jsource.fields.each { field ->
            // Find field with @Id annotation
            def idAnnotation = field.annotations.find {
                it.qualifiedName == javax.persistence.Id.canonicalName
            }
            if (idAnnotation != null) {
                if (field.type.primitive) {
                    def fieldSource = (FieldSource)field
                    def wrapperType = ClassUtils.primitiveToWrapper(ClassUtils.getClass(field.type.qualifiedName))

                    // Find property referring to this field
                    def p = (PropertySource)jsource.properties.find {
                        it.field.equals(field)
                    }

                    // Update property type
                    def setterParam = p.mutator.parameters.first()
                    def setterParamName = setterParam.name
                    p.mutator
                            .removeParameter(setterParam)
                            .addParameter(wrapperType, setterParamName)
                    p.type = wrapperType

                    // Update field type
                    fieldSource.type = wrapperType
                }
            }
        }

        // Generate and write updated class
        it.write(jsource.toString())
    })
}

/**
 * Task for generating entity classes using openjpa reverse mapping tool
 */
task openJpaGenerateEntities(dependsOn: [openJpaGenerateSchema]) {
    inputs.files OPENJPA_SCHEMA_XML.toString()
    outputs.dir JPA_GENERATED_DIR

    doLast {
        def params = [
                "-properties", OPENJPA_PERSISTENCE_XML,
                "-directory", JPA_GENERATED_DIR,
                "-pkg", JPA_GENERATED_PACKAGE,
                "-annotations", "true",
                "-useGenericCollections", "true",
                "-nullableAsObject", "true",
                "-metadata", "none",
                // Eclipselink is not capable of inner identity classes :(
//                "-innerIdentityClasses", "true",
//                "-identityClassSuffix", "PrimaryKey",
                OPENJPA_SCHEMA_XML
        ] as String[]

        ReverseMappingTool.main(params)

        openJpaPostProcess(DB_TABLES_XML, JPA_GENERATED_DIR)
    }
}

/**
 * Top-level task for generating jpa entities
 */
task jpaGenerate(dependsOn: [openJpaGenerateEntities], group: JPA_TASK_GROUP) << { }
tasks.compileJava.dependsOn(jpaGenerate)
