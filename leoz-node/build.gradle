import groovy.io.FileType
import groovy.xml.MarkupBuilder
import org.apache.commons.lang3.ClassUtils
import org.apache.commons.lang3.SystemUtils
import org.jboss.forge.roaster.Roaster
import org.jboss.forge.roaster.model.source.FieldSource
import org.jboss.forge.roaster.model.source.JavaClassSource
import org.jboss.forge.roaster.model.source.PropertySource
import org.jooq.util.DefaultGeneratorStrategy
import org.jooq.util.Definition
import org.jooq.util.GenerationTool
import org.jooq.util.GeneratorStrategy
import org.jooq.util.h2.H2Database
import org.jooq.util.jaxb.*
import sx.platform.OperatingSystem

buildscript {
    ext {
        v_aspectj = '1.8.11'
        v_querydsl = '4.1.4'
        v_jaxb = '2.3.0'
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
        // Flyway
        classpath "org.flywaydb:flyway-gradle-plugin:$v_flyway"
        classpath "com.h2database:h2:$v_h2"
        // Roaster
        classpath "org.jboss.forge.roaster:roaster-api:$v_roaster"
        classpath "org.jboss.forge.roaster:roaster-jdt:$v_roaster"
        classpath "org.apache.commons:commons-lang3:$v_commons_lang"
        // QueryDSL SQL codegen
        classpath "com.querydsl:querydsl-sql-codegen:$v_querydsl"
        // JOOQ
        classpath "org.jooq:jooq:$v_jooq"
        classpath "org.jooq:jooq-meta:$v_jooq"
        classpath "org.jooq:jooq-codegen:$v_jooq"
        // WSDL2Java
        classpath 'no.nils:wsdl2java:0.10'
        classpath "com.sun.xml.bind:jaxb-xjc:$v_jaxb"
        classpath "com.sun.xml.bind:jaxb-core:$v_jaxb"
        classpath "com.sun.xml.bind:jaxb-impl:$v_jaxb"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'no.nils.wsdl2java'
apply plugin: 'sx-packager'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

group = 'org.deku.leoz'
version = '0.74-SNAPSHOT'
mainClassName = 'org.deku.leoz.node.Main'

//region Constants
def GENERATED_DIR = file('src/generated')
def PROTOTYPE_TEST_DIR = file('src/prototype/java')

// Database constants
def PROJECT_DB_DIR = file('src/main/resources/db/node')

def WS_WSDL_DIR = file('src/main/resources/wsdl')
def WS_CXF_GENERATED_DIR = new File(GENERATED_DIR, 'cxf')

class Constants {
    static JPA_GENERATED_PACKAGE = 'org.deku.leoz.node.data.jpa'
}
//endregion

clean {
    doFirst {
        GENERATED_DIR.deleteDir()
    }
}

sourceSets {
    main {
        java {
            srcDirs += WS_CXF_GENERATED_DIR
        }
    }
}

//region Prototype test setup
sourceSets {
    test {
        java {
            srcDirs += PROTOTYPE_TEST_DIR
        }
    }
}

test {
    useJUnit {
        includeCategories 'sx.junit.StandardTest'
    }
}
//endregion

configurations {
    driver
    querydslapt
}

// TODO: to be removed when spring-boot goes final
repositories {
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

dependencies {
    // leoz webservice dependencies
    compile(
            project(':sx-common'),
            project(':leoz-core'),
            project(':leoz-node-data'),
            project(':leoz-smartlane'),

            // Kotlin
            "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin",
            "org.jetbrains.kotlin:kotlin-reflect:$v_kotlin",

            // spring
            "org.springframework.data:spring-data-jpa:$v_spring_data_jpa",
            "org.springframework.data:spring-data-commons:$v_spring_data_commons",
            "org.springframework:spring-web:$v_spring",
//            "org.springframework:spring-aspects"

            // spring boot
            "org.springframework.boot:spring-boot-starter:$v_springboot",
            dependencies.create("org.springframework.boot:spring-boot-starter-web:$v_springboot") {
                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
            },
            "org.springframework.boot:spring-boot-starter-undertow:$v_springboot",
            "org.springframework.boot:spring-boot-actuator:$v_springboot",
            "org.springframework.boot:spring-boot-devtools:$v_springboot",

            // logging
            "org.slf4j:jul-to-slf4j:$v_slf4j",
            "org.slf4j:log4j-over-slf4j:$v_slf4j",
            "ch.qos.logback:logback-classic:$v_logback",

            // webservice
            // for various javax interfaces (eg. ServletContextListener)
            "javax.servlet:javax.servlet-api:$v_javax_servlet",
            // jaxrs/resteasy
            "org.jboss.resteasy:resteasy-jaxrs:$v_resteasy",
            "org.jboss.resteasy:resteasy-spring:$v_resteasy",
            "org.jboss.resteasy:resteasy-jackson2-provider:$v_resteasy",
            "org.jboss.resteasy:resteasy-client:$v_resteasy",

            // CXF (client)
            "org.apache.cxf:cxf-spring-boot-starter-jaxws:$v_apache_cxf",

            // jackson JSON serializer
            "com.fasterxml.jackson.core:jackson-core:$v_jackson",
            "com.fasterxml.jackson.core:jackson-annotations:$v_jackson",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$v_jackson",
            "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$v_jackson",
            "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson",

            "org.zalando:problem:$v_rest_problem",
            "org.zalando:jackson-datatype-problem:$v_rest_problem",

            // JPA
            "javax.persistence:javax.persistence-api:$v_javax_persistence",
            dependencies.create("org.eclipse.persistence:eclipselink:$v_eclipselink") {
                exclude module: 'javax.persistence'
            },

            // queryDSL
            "com.querydsl:querydsl-core:$v_querydsl",
            "com.querydsl:querydsl-jpa:$v_querydsl",
            "com.querydsl:querydsl-collections:$v_querydsl",
            "com.querydsl:querydsl-sql-codegen:$v_querydsl",

            "org.flywaydb:flyway-core:$v_flyway",

            // JSR-330
            "javax.inject:javax.inject:1",

            // databases
            "com.h2database:h2:$v_h2",

            // jooq
            "org.jooq:jooq:$v_jooq",
            "org.jooq:jooq-codegen:$v_jooq",

            // ActiveMQ
            "org.apache.activemq:activemq-broker:$v_activemq",
            "org.apache.activemq:activemq-kahadb-store:$v_activemq",
            "org.apache.activemq:activemq-jms-pool:$v_activemq",
            "org.apache.activemq:activemq-jaas:$v_activemq",
            "org.apache.activemq:activemq-mqtt:$v_activemq",
            dependencies.create("org.apache.activemq:activemq-http:$v_activemq") {
                exclude group: 'org.springframework'
                exclude group: 'org.apache.activemq', module: 'activemq-spring'
                exclude group: 'org.eclipse.jetty.aggregate'
            },
            // http support
            "org.apache.httpcomponents:httpclient:$v_apache_httpclient",
            "com.thoughtworks.xstream:xstream:$v_xstream",

            // ssh support
            project(':mina-sshd-core'),

            // spring
            "org.springframework:spring-aop:$v_spring",
            "org.springframework:spring-aspects:$v_spring",
            "org.springframework:spring-context:$v_spring",
            "org.springframework:spring-instrument:$v_spring",
            "org.springframework:spring-jms:$v_spring",
            "org.springframework:spring-orm:$v_spring",
            "org.springframework:spring-webmvc:$v_spring",

            // json
            dependencies.create("io.swagger:swagger-jaxrs:$v_swagger") {
                // Conflicts with resteasy/classpath which uses a newer version of the spec
                exclude group: 'javax.ws.rs', module: 'jsr311-api'
            },
            "org.javassist:javassist:$v_javassist",

            // pdfbox
            "org.apache.pdfbox:pdfbox:2.0.8",

            // Tika, content analysis framework
            "org.apache.tika:tika-core:$v_apache_tika",

            // hawt.io
            "io.hawt:hawtio-springboot:2.0.0",
            "org.jolokia:jolokia-spring:1.3.7",

            // serialization
            "com.esotericsoftware:kryo:$v_kryo",
            "de.javakaffee:kryo-serializers:$v_kryo_serializers",

            // joda time (spring-5.0 requirement)
            "joda-time:joda-time:2.9.9",

            // Socket.IO
            "io.socket:socket.io-client:$v_socketio",

            //region EVALUATION
            "org.jinq:jinq-jpa:+",

            "com.jcraft:jsch:+",

            "org.aspectj:aspectjrt:$v_aspectj",
            "org.aspectj:aspectjweaver:$v_aspectj",

            "com.vaadin:vaadin-spring-boot:2.0.1",
            "com.vaadin:vaadin-client:$v_vaadin",
            "com.vaadin:vaadin-client-compiled:$v_vaadin",
            "com.vaadin:vaadin-themes:$v_vaadin",
            //endregion
    )

    driver(
            "com.h2database:h2:$v_h2"
    )

    querydslapt(
            "com.querydsl:querydsl-apt:$v_querydsl:jpa"
    )

    testCompile(
            "junit:junit:$v_junit",

            // webservice client libraries for test cases
            "org.jboss.resteasy:resteasy-client:$v_resteasy",
            "org.springframework:spring-test:$v_spring",

            dependencies.create("org.springframework.boot:spring-boot-starter-test:$v_springboot") {
                exclude group: 'com.vaadin.external.google', module: 'android-json'
            },

            // Artemis
            dependencies.create("org.apache.activemq:artemis-jms-server:$v_artemis") {
                // Conflicts with jms 1.1 which is required by activemq 5.x
                exclude group: 'org.apache.activemq', module: 'artemis-jms-client'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_2.0_spec'
            },
            dependencies.create("org.apache.activemq:artemis-jms-client:$v_artemis") {
                // Conflicts with jms 1.1 which is required by activemq 5.x
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_2.0_spec'
            },
            dependencies.create("org.apache.activemq:artemis-amqp-protocol:$v_artemis") {
                exclude group: 'org.apache.activemq', module: 'artemis-jms-client'
                exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_2.0_spec'
            }
    )
}

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group.startsWith('com.fasterxml.jackson')) {
                details.useVersion v_jackson
            }
        }
    }
}

run {
    errorOutput = System.err
    standardOutput = System.out
    standardInput = System.in
}

distributions {
    main {
        contents {
            from project.buildSupplementalsDir
        }
    }
}
tasks.distTar.enabled = false

wsdl2javaExt {
    cxfVersion = v_apache_cxf
    deleteGeneratedSourcesOnClean = false
}

wsdl2java {
    doFirst {
        WS_CXF_GENERATED_DIR.deleteDir()
    }

    inputs.dir WS_WSDL_DIR
    outputs.dir WS_CXF_GENERATED_DIR

    generatedWsdlDir = WS_CXF_GENERATED_DIR
    wsdlDir = WS_WSDL_DIR
    wsdlsToGenerate = [
            ['-p', 'org.deku.leoz.ws.blz',
             '-autoNameResolution',
             '-wsdlLocation', 'classpath:/wsdl/BLZService.wsdl',
             new File(WS_WSDL_DIR, 'BLZService.wsdl')],

            ['-p', 'org.deku.leoz.ws.gls.tracking',
             '-autoNameResolution',
             '-wsdlLocation', 'classpath:/wsdl/Tracking.wsdl',
             new File(WS_WSDL_DIR, 'Tracking.wsdl')],

            ['-p', 'org.deku.leoz.ws.gls.shipment',
             '-autoNameResolution',
             '-wsdlLocation', 'classpath:/wsdl/ShipmentProcessingService.wsdl',
             new File(WS_WSDL_DIR, 'ShipmentProcessingService.wsdl')]
    ]
}
tasks.compileJava.dependsOn(wsdl2java)
tasks.compileKotlin.dependsOn(wsdl2java)

packager {
    title = "Leoz Node"
    operatingSystems = [ OperatingSystem.WINDOWS, OperatingSystem.LINUX ]
}

//region Custom tasks

// Include sx platform/binaries
tasks.classes.dependsOn(copyRsyncPlatformDirToBuild)
// Include leoz global platform/binaries
tasks.classes.dependsOn(copyGlobalPlatformDirToBuild)

/**
 * Task for syncing webapp content to build/classes
 */
task copyWebapp(type: Sync) {
    from 'src/main/webapp'
    into new File(processResources.destinationDir, 'webapp')
}
tasks.compileJava.dependsOn(copyWebapp)

/**
 * Task for syncing vaadin webapp content to build/classes
 */
task copyVaadinWebapp(type: Sync) {
    from 'src/main/webapp/VAADIN'
    into new File(processResources.destinationDir, 'VAADIN')
}
tasks.compileJava.dependsOn(copyVaadinWebapp)
//endregion
