import groovy.io.FileType
import groovy.xml.MarkupBuilder
import org.apache.commons.lang3.ClassUtils
import org.deku.gradle.PackagerPlugin
import org.jboss.forge.roaster.Roaster
import org.jboss.forge.roaster.model.source.FieldSource
import org.jboss.forge.roaster.model.source.JavaClassSource
import org.jboss.forge.roaster.model.source.PropertySource
import org.jooq.util.DefaultGeneratorStrategy
import org.jooq.util.Definition
import org.jooq.util.GenerationTool
import org.jooq.util.GeneratorStrategy
import org.jooq.util.h2.H2Database
import org.jooq.util.jaxb.*
import java.io.File
import java.nio.file.Files

buildscript {
    ext {
        v_aspectj = '1.8.9'
        v_querydsl = '4.1.4'
        v_openjpa = '2.4.1'
        v_roaster = '2.19.1.Final'
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
        // Flyway
        classpath "org.flywaydb:flyway-gradle-plugin:$v_flyway"
        classpath "com.h2database:h2:$v_h2"
        // Eclipselink
        classpath "org.eclipse.persistence:eclipselink:$v_eclipselink"
        // Roaster
        classpath "org.jboss.forge.roaster:roaster-api:$v_roaster"
        classpath "org.jboss.forge.roaster:roaster-jdt:$v_roaster"
        classpath "org.apache.commons:commons-lang3:$v_commons_lang"
        // Agent plugin
        classpath "gradle.plugin.com.zoltu:application-agent:1.0.12"
        // QueryDSL SQL codegen
        classpath "com.querydsl:querydsl-sql-codegen:$v_querydsl"
        // JOOQ
        classpath "org.jooq:jooq:$v_jooq"
        classpath "org.jooq:jooq-meta:$v_jooq"
        classpath "org.jooq:jooq-codegen:$v_jooq"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'
//apply plugin: "com.zoltu.application-agent"
apply plugin: PackagerPlugin

group = 'org.deku.leoz'
sourceCompatibility = 1.8
version = '0.58-RELEASE'
mainClassName = 'org.deku.leoz.node.Main'

def GENERATED_DIR = file("${project.projectDir}/src/generated")

// Database constants
def PROJECT_DB_DIR = new File(project.projectDir, 'src/main/resources/db')

def DB_DIR = new File(project.buildDir, 'db')
def DB_PERSISTENCE_XML = new File(DB_DIR, 'META-INF/persistence.xml')
def DB_H2_JDBC_DRIVER = 'org.h2.Driver'
// TODO: enabling TO_UPPER until DataGrip/IntelliJ support disabling it properly https://youtrack.jetbrains.com/issue/DBE-3292
def DB_H2_JDBC_URL = "jdbc:h2:${DB_DIR}/leoz;database_to_upper=true"
// Tables file which contains mapping to @Serializable uids
def DB_TABLES_XML = new File(PROJECT_DB_DIR, "tables.xml")

// SQL migrations (used for flyway eg.)
def FLYWAY_MIGRATION_DIR = new File(PROJECT_DB_DIR, 'migration')

def JOOQ_PACKAGE_NAME = "org.deku.leoz.node.data.jooq"
def JOOQ_GENERATED_DIR = new File(GENERATED_DIR, 'jooq')
def QUERYDSL_GENERATED_DIR = new File(GENERATED_DIR, 'querydsl')

class Constants {
    static def JPA_GENERATED_PACKAGE = 'org.deku.leoz.node.data.jpa'
}

def JPA_GENERATED_PACKAGE = Constants.JPA_GENERATED_PACKAGE
def JPA_TASK_GROUP = 'jpa'

clean {
    doFirst {
        GENERATED_DIR.deleteDir()
    }
}

//kapt {
//    generateStubs = true
//}

idea {
    module {
        // Add KAPT generated sources to intellij
        sourceDirs += file("$projectDir/build/generated/source/kapt/main")
    }
}

sourceSets {
    test {
        java {
            srcDirs += file("$projectDir/src/prototype/java")
        }
    }
    main {
        java {
            srcDirs += JOOQ_GENERATED_DIR
            srcDirs += QUERYDSL_GENERATED_DIR
        }
        // Required for eclipse modelgen to find xml resources (eg. persistence.xml)
        output.resourcesDir = sourceSets.main.output.classesDir
    }
}


compileJava {
    dependsOn processResources
    // Bend compilation destination path, the final classes are produced by `jpaWeaving`
    destinationDir = new File(project.buildDir, "classes-unweaved")
}

test {
    exclude 'org/deku/leoz/node/prototype/**'
}

configurations {
    driver
    querydslapt
}

dependencies {
    // leoz webservice dependencies
    compile(
            project(':libs:sx-common'),
            project(':leoz-core'),

            // Kotlin
            "org.jetbrains.kotlin:kotlin-runtime:$v_kotlin",
            "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin",
            "org.jetbrains.kotlin:kotlin-reflect:$v_kotlin",

            // spring
            "org.springframework.data:spring-data-jpa:$v_spring_data_jpa",
            "org.springframework.data:spring-data-commons:$v_spring_data_commons",
            "org.springframework:spring-web:$v_spring",
            //"org.springframework:spring-aspects"

            // spring boot
            "org.springframework.boot:spring-boot-starter:$v_springboot",
            dependencies.create("org.springframework.boot:spring-boot-starter-web:$v_springboot") {
                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
            },
            "org.springframework.boot:spring-boot-starter-undertow:$v_springboot",
            "org.springframework.boot:spring-boot-actuator:$v_springboot",

            // logging
            "org.slf4j:jul-to-slf4j:$v_slf4j",
            "org.slf4j:log4j-over-slf4j:$v_slf4j",
            "ch.qos.logback:logback-classic:$v_logback",

            // webservice
            // for various javax interfaces (eg. ServletContextListener)
            "javax.servlet:javax.servlet-api:$v_javax_servlet",
            // jaxrs/resteasy
            "org.jboss.resteasy:resteasy-jaxrs:$v_resteasy",
            "org.jboss.resteasy:resteasy-spring:$v_resteasy",
            "org.jboss.resteasy:resteasy-jackson2-provider:$v_resteasy",
            "org.jboss.resteasy:resteasy-client:$v_resteasy",

            // jackson JSON serializer
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$v_jackson",
            "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson",

            // persistence framework(s)
            // eclipselink
            "org.eclipse.persistence:eclipselink:$v_eclipselink",

            // queryDSL
            "com.querydsl:querydsl-core:$v_querydsl",
            "com.querydsl:querydsl-jpa:$v_querydsl",
            "com.querydsl:querydsl-collections:$v_querydsl",
            "com.querydsl:querydsl-sql-codegen:$v_querydsl",

            "org.flywaydb:flyway-core:4.0.3",

            // JSR-330
            "javax.inject:javax.inject:1",

            // databases
            "com.h2database:h2:$v_h2",

            // persistence
            "org.eclipse.persistence:javax.persistence:$v_javax_persistence",

            // jooq
            "org.jooq:jooq:$v_jooq",
            "org.jooq:jooq-codegen:$v_jooq",

            // ActiveMQ
            "org.apache.activemq:activemq-broker:$v_activemq",
            "org.apache.activemq:activemq-kahadb-store:$v_activemq",
            "org.apache.activemq:activemq-jms-pool:$v_activemq",
            "org.apache.activemq:activemq-jaas:$v_activemq",
            "org.apache.activemq:activemq-mqtt:$v_activemq",
            dependencies.create("org.apache.activemq:activemq-http:$v_activemq") {
                exclude group: 'org.springframework'
                exclude group: 'org.apache.activemq', module: 'activemq-spring'
                exclude group: 'org.eclipse.jetty.aggregate'
            },
            // http support
            "org.apache.httpcomponents:httpclient:$v_apache_httpclient",
            "com.thoughtworks.xstream:xstream:$v_xstream",

            // Artemis
            "org.apache.activemq:artemis-jms-server:1.4.0",

            // ssh support
            "org.apache.sshd:sshd-core:$v_sshd",

            // spring
            "org.springframework:spring-jms:$v_spring",
            "org.springframework:spring-instrument:$v_spring",
            "org.springframework:spring-aspects:$v_spring",

            // json doc
            dependencies.create("io.swagger:swagger-jaxrs:$v_swagger") {
                // Conflicts with resteasy/classpath which uses a newer version of the spec
                exclude group: 'javax.ws.rs', module: 'jsr311-api'
            },
            "org.javassist:javassist:$v_javassist",

            // hawt.io
            "io.hawt:hawtio-springboot:2.0.0",
            "org.jolokia:jolokia-spring:1.3.5",

            // serialization
            "com.esotericsoftware:kryo:$v_kryo",

            // TODO: for testing jinq
            "org.jinq:jinq-jpa:+",

            // TODO: for testing jsch
            "com.jcraft:jsch:+",

            // TODO: For testing aspectj proxies with spring
            "org.aspectj:aspectjrt:$v_aspectj",
            "org.aspectj:aspectjweaver:$v_aspectj",

            // TODO: for testing vaadin
            "com.vaadin:vaadin-spring-boot:1.1.0",
            "com.vaadin:vaadin-client:$v_vaadin",
            "com.vaadin:vaadin-client-compiled:$v_vaadin",
            "com.vaadin:vaadin-widgets:$v_vaadin",
            "com.vaadin:vaadin-themes:$v_vaadin",
    )

    driver(
            "com.h2database:h2:$v_h2"
    )

    // TODO: kapt disabled due to https://youtrack.jetbrains.com/issue/KT-14139. @see generateQueryDSL
    // QueryDSL codegen/annotation processor
//    kapt(
//            "com.querydsl:querydsl-apt:$v_querydsl:jpa",
//            "org.eclipse.persistence:javax.persistence:$v_javax_persistence")

    querydslapt(
            "com.querydsl:querydsl-apt:$v_querydsl:jpa"
    )

    testCompile(
            "junit:junit:$v_junit",

            // webservice client libraries for test cases
            "org.jboss.resteasy:resteasy-client:$v_resteasy",
            "org.springframework:spring-test:$v_spring",
            "org.springframework.boot:spring-boot-starter-test:$v_springboot",

            project(':libs:sx-common')
    )
}

flyway {
    driver = DB_H2_JDBC_DRIVER
    url = DB_H2_JDBC_URL
    locations = ["filesystem:${FLYWAY_MIGRATION_DIR}"]
}

run {
    errorOutput = System.err
    standardOutput = System.out
    standardInput = System.in
}

distributions {
    main {
        contents {
            from projectBuildSupplementalsDir
        }
    }
}

tasks.installDist {
    doLast {
        def src = project.buildDir.toPath()
                .resolve("install")
                .resolve(project.name)

        def dst = g_vm_dist_path
                .toPath()
                .resolve(project.name)

        println("Moving [${src}] to [${dst}]")

        dst.deleteDir()
        Files.move(src, dst)
    }
}

packager {
    title = "Leoz Node"
    releaseBasePath = g_release_path
    osxIcon = g_osx_icon
    windowsIcon = g_windows_icon
    supplementalPlatformDirs(
            (projectBuildPlatformDir): (platformDirRelative)
    )
}

//region Custom tasks

// Include sx platform/binaries
tasks.classes.dependsOn(copySxPlatformDirToBuild)
// Include leoz global platform/binaries
tasks.classes.dependsOn(copyGlobalPlatformDirToBuild)

/**
 * Task for syncing webapp content to build/classes
 */
task copyWebapp(type: Sync) {
    from 'src/main/webapp'
    into 'build/classes/main/webapp'
}
tasks.compileJava.dependsOn(copyWebapp)

/**
 * Task for syncing vaadin webapp content to build/classes
 */
task copyVaadinWebapp(type: Sync) {
    from 'src/main/webapp/VAADIN'
    into 'build/classes/main/VAADIN'
}
tasks.compileJava.dependsOn(copyVaadinWebapp)
//endregion

//region JPA
/**
 * Task for statically weaving eclipselink entitiy classes.
 * This must be a `JavaExec` path otherwise there's sporadic issues with StaticWeave not being able to find
 * specific classes of subprojects.
 */
task jpaWeaving(type: JavaExec, group: JPA_TASK_GROUP) {
    inputs.dir compileJava.destinationDir
    outputs.dir sourceSets.main.output.classesDir

    dependsOn tasks.compileJava, tasks.compileKotlin
    mustRunAfter tasks.compileJava, tasks.compileKotlin

    main 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
    args '-persistenceinfo', DB_DIR,
            compileJava.destinationDir.getAbsolutePath(),
            sourceSets.main.output.classesDir
    classpath = configurations.compile
}
// Dependencies
tasks.classes {
    dependsOn tasks.jpaWeaving
    mustRunAfter tasks.jpaWeaving
}
//endregion

//region JOOQ
/**
 * JOOQ generator strategy
 */
public class CustomJooqGeneratorStrategy extends DefaultGeneratorStrategy {
    @Override
    String getJavaPackageName(Definition definition, GeneratorStrategy.Mode mode) {
        def packageName = super.getJavaPackageName(definition, mode)
        // Mangle package name for jpa pojos
        if (mode == GeneratorStrategy.Mode.POJO) {
            packageName = Constants.JPA_GENERATED_PACKAGE
        }
        return packageName
    }
}

/**
 * JOOQ generator configuration
 */
def jooqConfiguration = new Configuration()
        .withJdbc(
        new Jdbc()
                .withDriver(DB_H2_JDBC_DRIVER)
                .withUrl(DB_H2_JDBC_URL))
        .withGenerator(
        new Generator()
                .withGenerate(
                new Generate()
                        .withJpaAnnotations(true)
                        .withPojos(true)
                        .withFluentSetters(false)
                        .withPojosEqualsAndHashCode(true))
                .withStrategy(new Strategy()
                .withName(CustomJooqGeneratorStrategy.class.canonicalName))
                .withDatabase(
                new Database()
                        .withName(H2Database.class.canonicalName)
                        .withInputSchema('PUBLIC'))
                .withTarget(
                new Target()
                        .withPackageName(JOOQ_PACKAGE_NAME)
                        .withDirectory(JOOQ_GENERATED_DIR.toString())))

/**
 * Task generating JOOQ and JPA classes.
 * TODO: jooq plugin doesn't work correctly with customized generator strategy (class loading issue)
 */
task jooqGenerate(group: 'jooq') {
    dependsOn tasks.flywayMigrate
    mustRunAfter tasks.flywayMigrate

    inputs.dir FLYWAY_MIGRATION_DIR
    outputs.dir JOOQ_GENERATED_DIR

    doFirst {
        JOOQ_GENERATED_DIR.deleteDir()
    }

    doLast {
        GenerationTool.generate(jooqConfiguration)
        // Post process generated java classes
        List<String> entityClassNames = jpaPostProcess(DB_TABLES_XML, JOOQ_GENERATED_DIR)

        // Update persistence.xml to include generated classes. This is required for eclipselink static weaving
        // which relies on a complete persistence.xml
        generatePersistenceXml(DB_PERSISTENCE_XML, entityClassNames)
    }
}
// Dependencies
tasks.compileJava {
    dependsOn tasks.jooqGenerate
    mustRunAfter tasks.jooqGenerate
}
//endregion

//region QueryDSL
/**
 * Generates querydsl classes
 * Workaround for kapt issue https://youtrack.jetbrains.com/issue/KT-14139
 */
task queryDslGenerate(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java.srcDirs.collect().findAll { it != QUERYDSL_GENERATED_DIR } // input source set
    classpath = configurations.compile + configurations.querydslapt // add processor module to classpath
    // specify javac arguments
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor" // your processor here
    ]
    // specify output of generated code
    destinationDir = QUERYDSL_GENERATED_DIR
}
tasks.queryDslGenerate.dependsOn(tasks.jooqGenerate)
tasks.compileKotlin.dependsOn(tasks.queryDslGenerate)
tasks.compileJava.dependsOn(tasks.queryDslGenerate)
//endregion

//region Support methods
/**
 * Dynamically generate persistence.xml
 * @param persistenceXml Destination persistence.xml
 * @param classNames Class names to add to persistence unit
 * @return
 */
static def generatePersistenceXml(File persistenceXml, List<String> classNames) {
    persistenceXml.parentFile.mkdirs()

    def fileWriter = new FileWriter(persistenceXml)
    def builder = new MarkupBuilder(fileWriter)
    builder.persistence(xmlns: "http://java.sun.com/xml/ns/persistence", version: "1.0") {
        "persistence-unit"(name: "leoz") {
            properties {
            }
            classNames.each {
                "class"(it)
            }
        }
    }
    fileWriter.close();
}

/**
 * Performs post-processing on jpa-generated entity classes.
 * @param tablesXmlFile Source tables.xml to use
 * @param sourceDir Generated sources dir (to process)
 * @return List of entity class names that have been found
 */
static def List<String> jpaPostProcess(File tablesXmlFile, File sourceDir) {
    // Parse `tables.xml` for @Serializable uids and build look up map
    def tables = new XmlSlurper().parse(tablesXmlFile)
    def tableUidMap = new HashMap<String, String>()
    tables.table.each {
        tableUidMap[it.@name.toString().toLowerCase()] = it
    }

    // Id classes are collected here
    def idClassUidByEntityClassName = new HashMap<String, String>()

    // Entity class names are collected here
    def entityClassNames = new ArrayList<String>()

    // Iterate source files
    sourceDir.eachFileRecurse(FileType.FILES, {
        if (!it.name.endsWith(".java"))
            return

        def jtype = Roaster.parse(it)
        def jsource = (JavaClassSource) jtype

        // Look for JPA annotations
        def tableAnnotation = jsource.annotations.find {
            it.qualifiedName == javax.persistence.Table.canonicalName
        }

        def idClassAnnotation = jsource.annotations.find {
            it.qualifiedName == javax.persistence.IdClass.canonicalName
        }

        String uid
        if (tableAnnotation != null) {
            // Remove JPA annotations from jooq record classes (jooq can't be parameterized to do this :[)
            if (jsource.superType.startsWith(org.jooq.impl.UpdatableRecordImpl.canonicalName)) {
                jsource.removeAnnotation(tableAnnotation)

                def entityAnnotation = jsource.annotations.find {
                    it.qualifiedName == javax.persistence.Entity.canonicalName
                }
                if (entityAnnotation != null)
                    jsource.removeAnnotation(entityAnnotation)

                // Generate and write updated class
                it.write(jsource.toString())
                return
            }

            entityClassNames.add(jsource.canonicalName)

            def tableName = tableAnnotation.values.find { it.name == "name" }.stringValue

            // Skip flyway schema table
            if (tableName == "schema_version")
                return

            // Determine table uid
            def tableEntry = tableUidMap[tableName.toLowerCase()]
            if (tableEntry == null)
                throw new IllegalStateException("Table [${tableName}] is missing entry in [${tablesXmlFile}]")

            uid = tableEntry.@uid.toString()

            if (idClassAnnotation != null) {
                def idClassName = idClassAnnotation.literalValue
                def idClassUid = tableEntry.@pkuid.toString()
                idClassUidByEntityClassName[idClassName] = idClassUid
            }
        } else {
            if (idClassAnnotation == null) {
                return
            }
            uid = idClassUidByEntityClassName[jsource.canonicalName]
            if (uid == null)
                throw new IllegalStateException("Missing uid for id class [${jsource.canonicalName}]")
        }

        def uidLiteral = uid + "L"
        // Set @Serializable annotation if it's not there already
        if (jsource.annotations.find {
            it.qualifiedName == sx.io.serialization.Serializable.canonicalName
        } == null) {
            jsource
                    .addAnnotation()
                    .setName(sx.io.serialization.Serializable.canonicalName)
                    .setLiteralValue("uid", uidLiteral)
        }

        // Amend serializableVersionUID if applicable
        def serializableUidField = jsource.fields.find {
            it.name == "serialVersionUID"
        }
        if (serializableUidField != null)
            serializableUidField.literalInitializer = uidLiteral

        // EclipseLink currently does not support primitive @Id fields
        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=415027
        // Thus changing primitve @Id fields and referring properties to their wrapped object type counterpart
        jsource.fields.each { field ->
            // Find field with @Id annotation
            def idAnnotation = field.annotations.find {
                it.qualifiedName == javax.persistence.Id.canonicalName
            }
            if (idAnnotation != null) {
                if (field.type.primitive) {
                    def fieldSource = (FieldSource) field
                    def wrapperType = ClassUtils.primitiveToWrapper(ClassUtils.getClass(field.type.qualifiedName))

                    // Find property referring to this field
                    def p = (PropertySource) jsource.properties.find {
                        it.field.equals(field)
                    }

                    // Update property type
                    def setterParam = p.mutator.parameters.first()
                    def setterParamName = setterParam.name
                    p.mutator
                            .removeParameter(setterParam)
                            .addParameter(wrapperType, setterParamName)
                    p.type = wrapperType

                    // Update field type
                    fieldSource.type = wrapperType
                }
            }
        }

        // Generate and write updated class
        it.write(jsource.toString())
    })

    return entityClassNames
}
//endregion
