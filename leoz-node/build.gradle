apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: org.deku.gradle.PackagerPlugin
//apply plugin: 'flyway'

sourceCompatibility = 1.8
version = '0.21-RELEASE'
mainClassName = "org.deku.leoz.node.Main"

dependencies {
    // leoz webservice dependencies
    compile project(':libs:sx-common')
    compile project(':libs:leoz-common')

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-runtime:$v_kotlin"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin"

    // spring
    compile "org.springframework.data:spring-data-jpa:$v_spring_data_jpa"
    compile "org.springframework.data:spring-data-commons:$v_spring_data_commons"
    compile "org.springframework:spring-web:$v_spring"
    //compile "org.springframework:spring-aspects"
    // spring boot
    compile "org.springframework.boot:spring-boot-starter:$v_springboot"
    compile("org.springframework.boot:spring-boot-starter-web:$v_springboot") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow:$v_springboot"
    //optional "org.springframework.boot:spring-boot-configuration-processor"

    // logging
    compile "org.slf4j:jul-to-slf4j:$v_slf4j"
    compile "org.slf4j:log4j-over-slf4j:$v_slf4j"
    compile "ch.qos.logback:logback-classic:$v_logback"

    // webservice
    // for various javax interfaces (eg. ServletContextListener)
    compile "javax.servlet:javax.servlet-api:$v_javax_servlet"
    // jaxrs/resteasy
    compile "org.jboss.resteasy:resteasy-jaxrs:$v_resteasy"
    compile "org.jboss.resteasy:resteasy-spring:$v_resteasy"
    compile "org.jboss.resteasy:resteasy-jackson2-provider:$v_resteasy"

    // jackson JSON serializer
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$v_jackson"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson"

    // persistence framework(s)
    // eclipselink
    compile "org.eclipse.persistence:eclipselink:$v_eclipselink"

    // queryDSL
    compile "com.mysema.querydsl:querydsl-core:$v_querydsl"
    compile "com.mysema.querydsl:querydsl-jpa:$v_querydsl"
    compile "com.mysema.querydsl:querydsl-apt:$v_querydsl:jpa" // QueryDSL codegen/annotation processor
    compile "com.mysema.querydsl:querydsl-collections:$v_querydsl" // QueryDSL codegen/annotation processor

    kapt "com.mysema.querydsl:querydsl-apt:$v_querydsl:jpa"

    // flyway
    compile "org.flywaydb:flyway-core:$v_flyway"

    // JSR-330
    compile "javax.inject:javax.inject:$v_javax_inject"

    // JNA
//    compile "net.java.dev.jna:jna:$v_jna"
//    compile "net.java.dev.jna:jna-platform:$v_jna"

    // databases
    compile "com.h2database:h2:$v_h2"

    // discovery
    compile "javax.jmdns:jmdns:3.+"

    // persistence
    compile "org.eclipse.persistence:javax.persistence:$v_javax_persistence"

    // ActiveMQ
    compile "org.apache.activemq:activemq-broker:$v_activemq"
    compile "org.apache.activemq:activemq-kahadb-store:$v_activemq"
    compile "org.apache.activemq:activemq-jms-pool:$v_activemq"
    compile "org.apache.activemq:activemq-jaas:$v_activemq"
    compile "org.apache.activemq:activemq-mqtt:$v_activemq"
    compile("org.apache.activemq:activemq-http:$v_activemq") {
        exclude group: 'org.springframework'
        exclude group: 'org.apache.activemq', module: 'activemq-spring'
        exclude group: 'org.eclipse.jetty.aggregate'
    }
    // http support
    compile "org.apache.httpcomponents:httpclient:$v_apache_httpclient"
    compile "com.thoughtworks.xstream:xstream:$v_xstream"

    // ssh support
    compile 'org.apache.sshd:sshd-core:+'

    // spring
    compile ("org.springframework:spring-jms:$v_spring")

    // json doc
    compile "com.wordnik:swagger-jaxrs:$v_swagger"
    compile "org.javassist:javassist:$v_javassist"

    // serialization
    compile "com.esotericsoftware:kryo:$v_kryo"
    compile "org.xerial.snappy:snappy-java:+"

    // TODO: for testing jinq
    compile 'org.jinq:jinq-jpa:+'

    // TODO: for testing jsch
    compile 'com.jcraft:jsch:+'

    // TODO: For testing aspectj proxies with spring
//    compile "org.aspectj:aspectjtools:+"
//    compile "org.aspectj:aspectjweaver:+"

    // test dependencies
    testCompile group: 'junit', name: 'junit', version: v_junit

    // webservice client libraries for test cases
    testCompile "org.jboss.resteasy:resteasy-client:$v_resteasy"
    testCompile "org.springframework:spring-test"

    testCompile project(':libs:sx-common')
}

// Required for eclipse modelgen to find xml resources (eg. persistence.xml)
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
compileJava.dependsOn(processResources)

// Location for generated sources
// Directory for apt must be dedicated (no other generators may write here)
// otherwise triggering javac bug https://bugs.openjdk.java.net/browse/JDK-8062800
def srcdir_apt = file("$projectDir/src/generated/apt")

// Add generated sources to a separate sourceset, so IDEs can see them
// (Adding sources to main/java instead will cause subsequent builds to fail)
sourceSets {
    generated {
        java {
            srcDirs += srcdir_apt
        }
    }
    // Support for optionally playinc kotlin sources into separate directory
    main {
        java {
            srcDirs += 'src/main/kotlin'
        }
        kotlin  {
            srcDirs += srcdir_apt
        }
    }
}

kapt {
    generateStubs = true
}

compileJava {
    doFirst {
        // Source dir must exist
        srcdir_apt.exists() || srcdir_apt.mkdirs()
        // Tell javac about the generated sources location
        options.compilerArgs = [
                '-s', srcdir_apt.toString()
        ]
    }
}

run {
    errorOutput = System.err
    standardOutput = System.out
    standardInput = System.in
}

// Copy webapp content into classpath prior to compilation
task copyWebapp(type: Copy) {
    from 'src/main/webapp'
    into 'build/classes/main/webapp'
}
tasks.compileJava.dependsOn(copyWebapp)

tasks.classes.dependsOn(copySxBinariesToBuild)
tasks.classes.dependsOn(copyGlobalBinariesToBuild)

distributions {
    main {
        contents {
            from projectBuildSupplementalsDir
        }
    }
}

packager {
    title = "LeoZ Node"
    releaseBasePath = g_release_path
    osxIcon = g_osx_icon
    windowsIcon = g_windows_icon
    supplementalPlatformDirs(
            (projectBuildBinDir): new File('bin')
    )
}

// Packager task

// masc20150507. task prototypes
////copying all dependencies attached to 'compile' into a specific folder
//task copyAllDependencies(type: Copy) {
//    //referring to the 'compile' configuration
//    from configurations.compile
//    into 'allLibs'
//}
//
//configurations.all.each {
//    println "compile: $it"
//}
//
//sourceSets.main.compileClasspath.each {
//    println "ss: $it"
//}

//configurations.compile.allDependencies.each {
//    println "$it.group:$it.name:$it.version"
//
//}
