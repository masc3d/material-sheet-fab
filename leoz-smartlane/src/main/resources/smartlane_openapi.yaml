swagger: '2.0'
info:
  title: Smartlane OpenAPI Description
  description: "The following table contains a technical specification of all API endpoints usable for Smartlane"
  version: "1.0"
host: dispatch.smartlane.io
schemes:
  - https
basePath: /api
produces:
  - application/json
securityDefinitions:
  jwt:
    type: apiKey
    name: jwt
    in: header
security:
  - jwt: []
paths:
  /company:
    get:
      summary: "Company"
      description: "Returns the object data of the dispatcher's company. At the moment, there can be only one company in the database. However, for potential future extensions, the result of this call is a list containing one element: this one company"
      operationId: getCompany
      tags:
        - Company
      responses:
        200:
          description: List of company objects
          schema:
            $ref: "#/definitions/Companies"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /companyaddress:
    get:
      summary: "Company address"
      description: "Returns the address/locations of the company central."
      operationId: getCompanyAddress
      tags:
        - Company
      responses:
        200:
          description: Company address object
          schema:
            $ref: "#/definitions/Address"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /dispatcher:
    get:
      summary: "Dispatchers"
      description: Gets data of all dispatcher users in the database.
      operationId: getDispatcher
      tags:
        - Company
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: list of dispatcher user objects
          schema:
            $ref: "#/definitions/Dispatchers"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /dispatcher/{dispatcher_id}:
    get:
      summary: "Dispatcher (id)"
      description: "Gets data of a single dispatcher user with a given id of the database.
        Returns the address(es)/locations of the company centrals and depots."
      operationId: getDispatcherById
      tags:
        - Company
      parameters:
        - in: path
          name: dispatcher_id
          description: Dispatcher ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Dispatcher"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /adduser/dispatcher:
    post:
      summary: Adds an additional dispatcher to the system
      description: |
        Adds an additional dispatcher to the system after an initial one already exists.
      operationId: addDispatcher
      tags:
        - Company
      parameters:
        - in: body
          name: driver
          required: true
          schema:
            $ref: "#/definitions/AddDispatcher"
      responses:
        201:
          description: Created
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"  
  
  /driver:
    get:
      summary: Drivers
      description: |
        Returns a list of all drivers with all the information available.
      operationId: getDriver
      tags:
        - Driver
      parameters:
        - $ref: "#/parameters/filterQuery"
        - in: query
          name: includeavail
          required: false
          type: boolean
          description: |
            "Returns an additional field available (which is not stored in the database) for the referring driver if the query parameter 'includeavail' is set to 'true'. Defaults to false if parameter is not supplied.

            The result for 'available' is true if these two conditions are fullfilled for a driver:

            There is at least one timeframe in the driveravailability table.

            The current time is within one of the driveravailability time frames for this driver"
        - in: query
          name: includeposition
          type: boolean
          description: |
            "Returns an additional field current_position for the driver's current position if the query parameter 'includeposition' is set to 'true'. Defaults to false if parameter is not supplied.
            Both parameters can of course be combined, e.g.: /api/driver?includeavail=true&includeposition=true"
          required: false
        - in: query
          name: driverinfo
          type: boolean
          required: false
          description: |
            "Returns additional driver information (firstname, lastname, htmlcolor) if the query parameter 'driverinfo' is set to 'true'. Defaults to false if parameter is not supplied."
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Drivers"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    post:
      summary: Driver
      description: |
        Adds a new driver to the system.
      operationId: postDriver
      tags:
        - Driver
      parameters:
        - in: body
          name: driver
          required: true
          schema:
            $ref: "#/definitions/Driver"
      responses:
        201:
          description: Created
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /driver/{driver_id}:
    delete:
      summary: Driver
      description: "Deletes a driver from the system. Any driver connected to the system will not be able to log in anymore with the app or via the API and needs to be re-entered again."
      operationId: deleteDriverById
      tags:
        - Driver
      parameters:
        - in: path
          name: driver_id
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Driver"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    patch:
      summary: Driver
      description: |
        Edits/patches driver information.
      operationId: patchDriverById
      tags:
        - Driver
      parameters:
        - in: body
          name: driver
          required: true
          schema:
            $ref: "#/definitions/Driver"
        - in: path
          name: driver_id
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /driveravailability:
    get:
      summary: Driver availability
      description: Get the availability times of all drivers in the database.
      operationId: getDriverAvailability
      tags:
        - Driver
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Driveravailabilities"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    post:
      summary: "Driver availability"
      description: "Adds (but does not merge) a new driver availability time window to the database. It does not check if there is already an existing overlapping driver availability in the database. There might be multiple driver availabilities with overlapping time windows in the DB after using this POST call. if this is not desired, please use the endpoint POST /mergedriveravailability (see below)."
      operationId: postDriveravailability
      tags:
        - Driver
      parameters:
        - in: body
          name: driveravailability
          required: true
          schema:
            $ref: "#/definitions/Driveravailability"
      responses:
        201:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    patch:
      summary: Driver availability
      description: Edits an exisiting driver availability time window
      operationId: patchDriveravailability
      tags:
        - Driver
      parameters:
        - in: body
          name: driveravailability
          required: true
          schema:
            $ref: "#/definitions/Driveravailability"
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /driveravailability/{driveravailability_id}:
    get:
      summary: Driver availability (id)
      description: Gets one driver availability time window identified by the time windows ID
      operationId: getDriveravailabilityById
      tags:
        - Driver
      parameters:
        - in: path
          name: driveravailability_id
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Driveravailability"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    delete:
      summary: Driver availability (id)
      description: Deletes an exisiting driver availability time window
      operationId: deleteDriverAvailabilityById
      tags:
        - Driver
      parameters:
        - in: path
          name: driveravailability_id
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /mergedriveravailability:
    post:
      summary: "Merge driver availability"
      description: "Adds or merges a new driver availability time window after checking if another overlapping availity already exists. If there is one (at the beginning or the end of this on) ore two (at the beginning and the end of this one) already existing driver availabilities, it will be merged with the existing one(s) into one. If there is no overlapping availability, it will be added as a new one."
      operationId: postMergedriveravailability
      tags:
        - Driver
      parameters:
        - in: body
          name: driveravailability
          required: true
          schema:
            $ref: "#/definitions/Driveravailability"
      responses:
        200:
          description: new availability successfully merged with an existing one
        201:
          description: new availability successfully created
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /drivertracking:
    get:
      summary: Driver tracking
      description: Gets all driver tracking data from the database.
      tags:
        - Driver
      operationId: getDrivertracking
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Drivertrackings"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    post:
      summary: Driver tracking
      description: Creates a new driver tracking entry with a timestamp and a position
      operationId: postDrivertracking
      tags:
        - Driver
      parameters:
        - in: body
          name: drivertracking
          required: true
          schema:
            $ref: "#/definitions/Drivertracking"
      responses:
        201:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /drivertracking/{drivertracking_id}:
    get:
      summary: Driver tracking (id)
      description: Gets one driver tracking entry identified by the tracking entry ID
      operationId: getDrivertrackingById
      tags:
        - Driver
      parameters:
        - in: path
          name: drivertracking_id
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Drivertracking"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    delete:
      summary: Driver tracking
      description: Deletes one driver tracking entry identified by the tracking entry ID
      operationId: deleteDrivertrackingById
      tags:
        - Driver
      parameters:
        - in: path
          name: drivertracking_id
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /driverposition:
    get:
      summary: Drivers position
      description: |
        Fetches the current position of all drivers.
      operationId: getDriverposition
      tags:
        - Driver
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Driverpositions"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /driverposition/{driver_id}:
    get:
      summary: Driver position
      description: Gets the current position of a single driver by id.
      operationId: getDriverpositionById
      tags:
        - Driver
      parameters:
        - in: path
          name: driver_id
          description: Driver ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Driverposition"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /drivertrace/{driver_id}:
    get:
      summary: Driver trace (id)
      description: |
        Get a polyline of the already driven part of a route of one driver.
      operationId: getDrivertraceById
      tags:
        - Driver
      parameters:
        - in: path
          name: driver_id
          description: Driver ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: A GeoJSON Linestring
          schema:
            $ref: "#/definitions/Linestring"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /driverroute/{driver_id}:
    get:
      summary: "Driver route (id)"
      description: |
        "Get the ID of the driven route which the driver is actually driving on. A driver could be assigned to multiple routes. This endpoint returns only one route which the driver is actually already driving (route status is 'ontheway')."
      operationId: getDriverrouteById
      tags:
        - Driver
      parameters:
        - in: path
          name: driver_id
          description: Driver ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: the ID of the driven route
          schema:
            type: integer
            format: int32
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /driverstatus:
    get:
      summary: Driver status
      description: Get all possible status entries for drivers
      operationId: getDriverstatus
      tags:
        - Driver
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Driverstati"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /vehicletype:
    get:
      summary: Vehicle type
      description: Get all possible vehicle type entries for drivers.
      operationId: getVehicletype
      tags:
        - Driver
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Vehicletypes"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /address:
    post:
      summary: Address
      description: |
        Adds a new customer address to the address database. The new address can then be searched via /searchaddres. If no location (latitude/longitude) is given in the request, the address will automatically be geocoded and located on the map.
      operationId: postAddress
      tags:
        - Address
      parameters:
        - in: body
          name: body
          description: Address object
          required: false
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Addresses'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /addressforlocation:
    get:
      summary: Address for location
      description: |
        Retrieves a street address for a given geo location via reverse geocoding.
      operationId: getAddressforlocation
      tags:
        - Address
      parameters:
        - in: query
          name: lon
          description: longitude value
          required: true
          type: number
          format: float
        - in: query
          name: lat
          description: latitude value
          required: true
          type: number
          format: float
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Address'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /searchaddress:
    get:
      summary: Search address
      description: |
        Address objects in the database can be searched by a full text search on the fields company, contactlastname and contactfirstname for a given query string.

        Please note: Search works only on database objects which are indexed by Whoosh; i.e., elements which are already in the database before the whoosh index is initially created will be ignored in the search procedure.
      operationId: getSearchaddress
      tags:
        - Address
      parameters:
        - in: query
          name: query
          description: |
            "The query language which can be used as querystring is quite powerful. Its capabilities and syntax can be found here:

            http://whoosh.readthedocs.io/en/latest/querylang.html

            Quotes may ONLY be used if the exact string is being searched. 'Lieferquelle%20OR%20Stadtb%C3%BCcherei' (result nothing) is different from Lieferquelle%20OR%20Stadtb%C3%BCcherei (result Lieferquelle, Stadtbücherei)

            Please note: search works only on database objects which are indexed; i.e., elements which are already in the database before the index is initially created will be ignored in the search procedure."
          required: true
          type: string
        - in: query
          name: limit
          description: An Integer number definining the maximum number of search results to be shown.
          required: false
          type: integer
          format: int32
        - in: query
          name: citocode
          type: boolean
          description: Flag indicating if searched address is a [CitoCode](https://www.citocode.com/)
          default: false
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Address'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /geocode:
    post:
      summary: Geocode
      description: Returns a geocode from address infromation, including a freetext search
      operationId: postGeocode
      tags:
        - Address
      parameters:
        - in: body
          name: body
          description: >-
            Address information, body either contains a freesearchtext field or address information
          required: true
          schema:
            $ref: '#/definitions/GeocodeRequest'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Geocode'
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /delivery:
    get:
      summary: Delivery
      description: |
        Get data for all deliveries with all data available in the database.
      operationId: getDelivery
      tags:
        - Delivery
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Deliveries'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    post:
      summary: Delivery
      description: |
        Add a new delivery consisting of two addresses - A pickup location (depot) depot and delivery location (destination).
        Time window information pdt_from (erliest planned delivery time) and pdt_to (latest planned delivery time) must be provided for time window routing.
      operationId: postDelivery
      tags:
        - Delivery
      parameters:
        - in: body
          name: body
          description: Delivery object
          required: false
          schema:
            $ref: '#/definitions/Delivery'
      responses:
        201:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    patch:
      summary: Delivery
      description: |
        Edit any field of the delivery information.
      operationId: patchDelivery
      tags:
        - Delivery
      parameters:
        - in: body
          name: q
          description: Delivery object
          required: false
          schema:
            $ref: '#/definitions/Delivery'
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /delivery/{delivery_id}:
    get:
      summary: Delivery (id)
      description: "Get data for one delivery object in the database via it's id"
      operationId: getDeliveryById
      tags:
        - Delivery
      parameters:
        - in: path
          name: delivery_id
          description: Delivery ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Delivery'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /multidelivery/{multi_delivery_id}:
    get:
      summary: Multidelivery (id)
      description: "Get data for one multi_delivery_id from the database"
      operationId: getMultideliveryById
      tags:
        - Delivery
      parameters:
        - in: path
          name: multi_delivery_id
          description: Multi delivery ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
# Not exactly a delivery!
            $ref: '#/definitions/Deliveries'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"

  /deliverystatus:
    get:
      summary: Delivery status
      description: Get all possible status entries for deliveries.
      operationId: getDeliverystatus
      tags:
        - Delivery
      responses:
        200:
          description: A list of delivery status objects
          schema:
            $ref: '#/definitions/Deliverystati'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /deliverycode:
    get:
      summary: Delivery code
      description: "Get all possible status detail codes for deliveries. They offer a more detailed explanation (e.g. delivered to neighbor) to the status of a finished delivery (delivered or undelivered)."
      operationId: getDeliverycode
      tags:
        - Delivery
      responses:
        200:
          description: A list of delivery code objects
          schema:
            $ref: '#/definitions/Deliverycodes'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /orderup/{delivery_id}:
    get:
      summary: Order up (id)
      description: "Allows manual re-ordering of deliveries via id by increasing the order index of this delivery by one (it will be handeled later). The delivery which had the order index plus one before will switch the order index with this one."
      operationId: getOrderupById
      tags:
        - Delivery
      parameters:
        - in: path
          name: delivery_id
          description: Delivery ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /orderdown/{delivery_id}:
    get:
      summary: Order down (id)
      description: "Allows manual re-ordering of deliveries via id by decreasing the order index of this delivery by one (it will be handeled earlier). The delivery which had the order index minus one before will switch the order index with this one"
      operationId: getOrderdownById
      tags:
        - Delivery
      parameters:
        - in: path
          name: delivery_id
          description: Delivery ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /deliverydone/{delivery_id}:
    post:
      summary: Delivery done (id)
      description: This call sets automatically values of this finished delivery for status ('delivered' or 'undelivered'), actual delivery time and drivernotes.
      operationId: postDeliverydoneById
      tags:
        - Delivery
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: delivery_id
          description: Delivery ID to finish.
          required: true
          type: integer
          format: int32
        - in: formData
          name: status
          description: Status is --delivered-- (= successfully delivered to recipient. This is default if not set) or --undelivered-- (indicating a failed delivery for re-planning).
          type: string
        - in: formData
          name: code
          type: integer
          format: int32
          default: 1
          description: Workflow code of the delivery status.
        - in: formData
          name: drivernotes
          type: string
          description: Additial notes from the driver, e.g. reasons for undeliverable item.
        - in: formData
          name: name
          type: string
          description: Name of the recipient.
        - in: formData
          name: scancode
          type: string
          description: Scanned barcode.
        - in: formData
          name: signature_base64
          type: string
          description: A base64 string containing a encoded png
        - in: formData
          name: signature_png
          type: string
          format: binary
          description: Local path of the signature file(s) to be uploaded.
          
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /finisheddeliveries:
    get:
      summary: Finished deliveries
      description: Returns a list of all finished ('delivered' or 'undelivered') deliveries filtered by time and status
      operationId: getFinisheddeliveries
      tags:
        - Delivery
      parameters:
        - in: query
          name: start
          description: "start time for query, defaults to midnight of today"
          required: false
          type: string
          format: dateTime
        - in: query
          name: end
          description: "end time for query, defaults to now"
          required: false
          type: string
          format: dateTime
        - in: query
          name: status
          description: "status filter for deliveries (delivered or undelivered or both)"
          required: false
          default: both
          type: string
        - in: query
          name: code
          description: "code for delivery status details (e.g. delivered to neighbor or recipient not at home). Available codes are available via GET /deliverycode. Defaults to 1 (deliverd to recipient) if status is delivered, else to 4 (recipient not present)"
          required: false
          type: integer
          format: int32
        - in: query
          name: allundelivered
          description: "indicates if date and time filter are ignored for undelivered deliveries. Often, all deliveries that are still undelivered should be displayed regardless of when the delivery attempt failed and regardless of the date fiolter for the successfully delivered deliveries. Defaults to true (all undelivered deliveries are returned)"
          required: false
          default: true
          type: boolean
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Deliveries'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /deliverybeeline/{delivery_id}:
    get:
      summary: Delivery beeline (id)
      description: Calculates the direct / beeline distance between a delivery location and its starting point (e.g. depot).
      operationId: getDeliverybeelineById
      tags:
        - Delivery
      parameters:
        - in: path
          name: delivery_id
          description: Delivery ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Linestring'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /canceldelivery/{delivery_id}:
    post:
      summary: Cancel delivery (id)
      description: "Cancels an unfinished (not yet delivered) delivery because of an unplanned event (e.g. customer cancels order). The delivery will be moved to the delivery archive and is not available anymore for routing"
      operationId: postCanceldeliveryById
      tags:
        - Delivery
      parameters:
        - in: path
          name: delivery_id
          description: Delivery ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /livedelivery/{signed_delivery_id}:
    get:
      summary: Live delivery (id)
      description: "Returns tracking information for one (signed) delivery. Tracking consists of the current position of the driver and an estimated time of arrival at the deliveries destination. This endpoint is not secured by an authorization token but it must be supplied a cryptographically signed key containing the delivery id as path parameter. This signed id is generated for all deliveries on a route when setting the route status to 'ontheway' (PATCH /route {status : 3}. By setting this route status, an email will be sent automatically to all delivery recipients for which an email address was supplied in their address. This emails each contains a link to a tracking page handling the signed delivery ID for tracking their delivery. "
      operationId: getLivedeliveryById
      tags:
        - Delivery
      parameters:
        - in: path
          name: signed_delivery_id
          description: Cryptographically signed delivery ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Livedelivery'
        403:
          $ref: "#/responses/MissingAuthorization"
        409:
          description: "A conflict with current data in the database has been deltected (e.g. delivery does not exist or is not assignet to a route)"
          schema:
            type: string
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"

  /route:
    get:
      summary: Route
      description: |
        Returns all data for all planned routes from the system.
      operationId: getRoute
      tags:
        - Route
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: List of route objects
          schema:
            $ref: "#/definitions/Routes"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /route/{route_id}:
    get:
      summary: Route (id)
      description: |
        Returns all data for one planned route from the system.
      operationId: getRouteById
      tags:
        - Route
      parameters:
        - in: path
          name: route_id
          description: Route ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Detailed route data
          schema:
            $ref: "#/definitions/Route"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
    patch:
      summary: Route (id)
      description: |
        Edits the route information.
        Currently used for updating the `status` and `driver_id`. Soon to be replaced by dedicated endpoints.
      operationId: patchRouteById
      tags:
        - Route
      parameters:
        - in: path
          name: route_id
          description: Route ID
          required: true
          type: integer
          format: int32
        - in: body
          name: route
          required: true
          schema:
            $ref: '#/definitions/Route'
      responses:
        200:
          description: Detailed route data
          schema:
            $ref: "#/definitions/Route"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /routemetadata:
    get:
      # Get data of all routes with reduced information and without route geometry
      summary: Route metadata
      description: |
        Returns a reduced set of data (without route geometry) for planned routes from the system.
        This call retrieves route objects with all fields except the following: routebase (only routebase address id), delivery details (only delivery ids), routestring.
      operationId: getRoutemetadata
      tags:
        - Route
      parameters:
        - in: query
          name: q
          description: Filter parameters
          required: false
          type: string
      responses:
        200:
          description: List of routes with minimal information
          schema:
            $ref: '#/definitions/Routemetadatas'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /routemetadata/{route_id}:
    get:
      summary: Route metadata (id)
      description: "Returns a reduced set of data (without geometry) for one planned route from the system.
        This call retrieves route objects with all fields except the following: routebase (only routebase address id), delivery details (only delivery ids), routestring."
      operationId: getRoutemetadataById
      tags:
        - Route
      parameters:
        - in: path
          name: route_id
          description: Route ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Minimal information for one single route
          schema:
            $ref: '#/definitions/Routemetadata'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /routingvariants:
    post:
      summary: Routing variants
      description:  Get all possible routing variants for a list of deliveries.
      operationId: postRoutingvariants
      tags:
        - Route
      parameters:
        - in: body
          name: body
          description: Delivery IDs
          required: true
          schema:
            type: object
            properties:
              deliveryids:
                type: array
                items:
                  type: integer
                  format: int32
      responses:
        200:
          description: Preferred routing variant and alternatives.
          schema:
            type: object
            properties:
              mainvariant:
                description: Preferred routing variant
                type: array
                items:
                  type: string
              variants:
                description: Alternative routing variants
                type: array
                items:
                  type: string
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /updateableroutes:
    get:
      summary: Updateable routes
      description: Get updateable routes.
      operationId: getUpdateableroutes
      tags:
        - Route
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: integer
        default:
          $ref: "#/responses/UnexpectedError"
  /traveltimematrix:
    post:
      summary: Traveltime matrix
      description:  Returns a calculated traveltime matrix between a set of different locations.
      operationId: postTraveltimematrix
      tags:
        - Route
      parameters:
        - in: body
          name: body
          description: Delivery IDs
          required: true
          schema:
            type: object
            properties:
              deliveryids:
                type: array
                items:
                  type: integer
                  format: int32
      responses:
        200:
          description: Here Maps distance matrix.
          schema:
            type: object
        403:
          $ref: "#/responses/MissingAuthorization"
        409:
          description: "Deliveries don't have a common starting point and thus cannot be optimized."
          schema:
            type: object
            properties:
              message:
                type: string
              status:
                type: integer
                format: int32
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /routedeliverydistances/{route_id}:
    get:
      summary: Route delivery distances (id)
      description: "Get all distances between subsequent deliveries on this route, i.e. an object containing information for all deliveries on this route including the distance from a delivery to its respective predecessor"
      operationId: getRoutedeliverydistancesById
      tags:
        - Route
      parameters:
        - in: path
          name: route_id
          description: Route ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Distances and information between deliveries of one route
          schema:
            $ref: '#/definitions/Routedeliverydistances'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /updateetas/timewindow/{route_id}:
    get:
      summary: Update etas timewindow (id)
      description: |
        "Calculates the estimated time of arrival for all active deliveries on one route with a gven ID

        This is an API call for calculating all estimated arrival times for all deliveries on a given route (which must be in the status 'ontheway'). The values are stored as 'eta_from' and 'eta_to' in the delivery tables of the database an can be retrieved via GET /delivery for each delivery.
        Calculation is done between the current position of a driver on the delivery's route and all deliveries each which must not be unassigned, (already) delivered or cancelled.
        The current and predicted traffic situation are considered in this call.
        The relevant route and the referring driver are automatically derived from the given route.
        All already delivered or cancelled assignments must have set a correct status. Otherwise they will be falsely considered in this calculation."
      operationId: getUpdateetasTimewindowById
      tags:
        - Route
      parameters:
        - in: path
          name: route_id
          description: Route ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /updateetas/timewindow:
    get:
      summary: Update etas timewindow
      description: |
        "Calculates the estimated time of arrival for all active deliveries on all active routes

        This is an API call for calculating all estimated arrival times for all deliveries on all routes which are in the status 'ontheway'. The values are stored as 'eta_from' and 'eta_to' in the delivery tables of the database an can be retrieved via GET /delivery for each delivery.
        Calculation is done between the current position of a driver on each delivery's route and all deliveries each which must not be unassigned, (already) delivered or cancelled.
        The current and predicted traffic situation are considered in this call.
        The relevant route and the referring driver are automatically derived from the given route.
        All already delivered or cancelled assignments must have set a correct status. Otherwise they will be falsely considered in this calculation."
      operationId: getUpdateetasTimewindow
      tags:
        - Route
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /routestatus:
    get:
      summary: Route status
      description: Get all possible status entries for routes.
      operationId: getRoutestatus
      tags:
        - Route
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Routestati'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"

  /calcroute/optimized/timewindow:
    post:
      summary: Calc route optimized timewindow
      description: |
        Calculates the shortest route for deliveries with time windows and a common starting point. This is an asynchroneous process. Results can be polled via GET /api/process/status/

        Calculates one continuous route for all given deliveries. It calls an intelligent algorithm which fits all delivery times into their respective time windows but also results in the shortest possible overall driving time.
      operationId: postCalcrouteOptimizedTimewindow
      tags:
        - Route
      parameters:
        - in: body
          name: body
          description: Routing Parameters
          required: true
          schema:
            type: object
            properties:
              deliveryids:
                description: a list of delivery ids which will be combined to the resulting tour. This parameter is required
                type: array
                items:
                  type: integer
                  format: int32
              truck:
                description: "indicates if a special route for trucks shall be calculated. In this case, truck restrictions on the respective roads will be respected. The resulting tour will not lead through truck restricted road sections. Default: false"
                default: false
                type: boolean
              timewindows:
                description: "indicates if timewindows shall be considerd in calculation. If 'timewindow' is not passed in the request, default is 'true' and all supplied time windows will always be considered. Default: true"
                default: true
                type: boolean
              strict:
                description: "indicates if all time windows of all deliveries should be strictly enforced. In this case, a tour cannot be calculated if the combination of time windows and travel times makes it impossible to calculate a tour fitting all time constraints. If this parameter is set to 'false' (which is the default value), time windows will be extended (relaxed) step by step from one to three hours. Bigger time windows increase the likelyhood of a possible routing solution but some deliveries will be made outside the planned time window. Default: false"
                default: false
                type: boolean

      responses:
        200:
          description: process_id (can be used for async status polling)
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /calcroute/single:
    post:
      summary: Calc route single
      description: |
        "Calculates one single route with more than one starting point. One pick-up and delivery after another.

         Calculates one continouus route for all deliveries without taking care of multiple stops at one location. Follows the simple scheme: starting point of first delivery → destination point of first delivery → starting point of second delivery → destination point of the second delivery → and so on..."
      operationId: postCalcrouteSingle
      tags:
      - Route
      parameters:
        - in: body
          name: body
          description: Delivery IDs
          required: true
          schema:
            type: object
            properties:
              deliveryids:
                type: array
                items:
                  type: integer
                  format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /calcroute/single/grouped/startpoint:
    post:
      summary: Calc route single grouped startpoint
      description: |
        "Calculates one single route of pick-ups and deliveries, grouped by pick-up points.

        Calculates one continouus route for all deliveries.
        Checks first if multiple deliveries have the same starting (pick-up) location each. The calculated route covers the starting (pick-up)  point of each group of delivereies before all of the referring delivery destinations."
      operationId: postCalcrouteSingleGroupedStartpoint
      tags:
      - Route
      parameters:
        - in: body
          name: body
          description: Delivery IDs
          required: true
          schema:
            type: object
            properties:
              deliveryids:
                type: array
                items:
                  type: integer
                  format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /calcroute/multi/grouped/startpoint:
    post:
      summary: Calc route multi grouped startpoint
      description: |
        "Calculates multiple routes of pick-ups and deliveries: One route per pick-up point

        Groups all given deliveries by their starting (pick-up) location and calculates one route per pick-up location containing all assigned deliveries.
        The order of deliveries in each route is taken from the database field orderindex for every delivery."
      operationId: postCalcrouteMultiGroupedStartpoint
      tags:
        - Route
      parameters:
        - in: body
          name: body
          description: Delivery IDs
          required: true
          schema:
            type: object
            properties:
              deliveryids:
                type: array
                items:
                  type: integer
                  format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"

  /calcroute/update/timewindow/{route_id}:
    patch:
      summary: Calc route update timewindow (id)
      description: |
        "Adds a new delivery from a depot to an existing time window optimized route

        Calculates a new route based on existing unfinished (not yet delivered or cancelled) deliveries of route with given ID. Additionally, it consumes a list of new deliveries as body parameter and calculates a route containing "old" and "new" deliveries combined.
        It also sets the status of the "old" route to 14 ("route_replaced") and sets the field "replaced_by" to the ID of the new calculated route. Notice: The new delivery must start from the same location (depot) than all others on the updated route. Pick-up deliveries with different pick-up locations are not supported"
      operationId: patchCalcRouteUpdateTimewindowById
      tags:
        - Route
      parameters:
        - in: path
          name: route_id
          description: Route ID
          required: true
          type: integer
          format: int32
        - in: body
          name: body
          description: Delivery IDs to be added to existing route.
          schema:
            type: object
            properties:
              deliveryids:
                type: array
                items:
                  type: integer
                  format: int32
      responses:
        200:
          description: OK. Route successfully updated.
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /upload/onestep:
    post:
      summary: Upload onestep
      description: "Uploads an excel file containing addresses, planned time windows and tour IDs. It afterwards automatically calculates optimized tours containing more accurate actual time windows."
      operationId: postUploadOnestep
      tags:
        - Route
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file[]
          description: "local path of the file(s) to be uploaded"
          required: true
          type: string
        - in: formData
          name: email
          description: "email address of the result excel file recipient. Defaults to dispatchers mail address"
          required: false
          type: string
          default: dispatchers mail address
        - in: query
          name: cancelroutes
          description: "If set to true, all previously existing routes will be archived before routing starts. Defaults to false"
          required: false
          default: false
          type: boolean
        - in: query
          name: assign_drivers
          description: "If set to true, all existing drivers will be randomly distributed to the resulting tours after routing. Defaults to false"
          required: false
          default: false
          type: boolean
        - in: query
          name: preclustered
          description: "If set to true, the user can pre-assign multiple delivery/address rows in the excel file to desired routes by setting any value in the tour-column. All remaining delivery entries in the excel file(s) with no entry in the tour column will be clustered automatically to new optimized tours. If set to false, all entries in the tour-column will be ignored and optimal area clusters will be calculated for the routing process. Defaults to true"
          required: false
          default: true
          type: boolean
        - in: query
          name: usearea
          description: "If set to true, imported deliveries will automatically be matched to pre-defined geographical areas. Usually, these areas are a union of one or more postal code areas. Existing areas can be viewed via GET /tourarea. All deliveries in one area will result in exactly one tour each. If there are remaining deliveries which are not located in one of the pre-defined areas, they will automatically clustered to new optimized tours. Defaults to false"
          required: false
          default: false
          type: boolean
        - in: query
          name: strict
          description: "If set to true, planned time windows for each delivery will be strictly enforced. E.g., a delivery which is planned for 9 am to 10 am will not be delivered before 9 am and not after 10 am. However, this setting decreases the likelihood of a solution for a complete tour if too many time windows of multiple deliveries are in conflict with each other. No tour will be calculated in this case."
          required: false
          default: true
          type: boolean
        - in: query
          name: numvehicles
          description: "Number of available vehicles/drivers for the routing. If not enough vehicles are supplied for the number of deliveries in the request/excel file, the result might be more clustered tours than available vehicles. If the resulting clustered tours are too extensive to be handeled by one driver each, the routing will fail for single tour clusters. As a rough estimation, there should be max. 30-40 deliveries/addresses per vehicle in the request/excel files. If this parameter is not supplied, it defaults to the number of previously created drivers in the system"
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: success message and process ID (response value process_id can later be used for status request)
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
#   /upload/twostep:
#     post:
#       summary: Upload twostep
#       description: "Uploads an excel file and prepares address correction for later tour calculation.
# 
#       Uploads an excel file containing addresses, planned time windows and tour IDs. It only uploads the excel file and creates delivery entities. It then returns a routing process id as well as inaccurate or wrong addresses so that they can be corrected before the actual routing process is started via POST /batchrouting/{process_id}."
#       operationId: postUploadTwostep
#       tags:
#         - Route
#       consumes:
#         - multipart/form-data
#       parameters:
#         - in: formData
#           name: file[]
#           description: local path of the file to be uploaded
#           required: true
#           type: string
#         - in: query
#           name: cancelroutes
#           description: If set to true, all formerly existing routes will be archived before routing starts. Defaults to false
#           required: false
#           default: false
#           type: boolean
#       responses:
#         200:
#           description: success message and process ID (response value process_id can later be used for status request and for batch routing call)
#         403:
#           $ref: "#/responses/MissingAuthorization"
#         422:
#           $ref: "#/responses/InvalidInput"
#         default:
#           $ref: "#/responses/UnexpectedError"
  /upload/deliveryonly:
    post:
      summary: Upload delivery only
      description: "Uploads an excel file and creates delivery objects.
      Uploads an excel file containing addresses and planned time windows and creates referring delivery objects. These delviery objects can later be used for manual routing processes, e.g. via /calcroute/optimized."
      operationId: postUploadDeliveryonly
      tags:
        - Route
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file[]
          description: local path of the file to be uploaded
          required: true
          type: string
      responses:
        200:
          description: success message
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /batchrouting/{process_id}:
    post:
      summary: Batch routing (id)
      description: "Initiates a routing process for a previously started excel upload. It needs the process ID as input parameter which was previously returned by calling /upload/{routingtype}. Fully automated and optimized routing with all relevant parameters is not yet available for two-step routing and address correction. Use /upload/onestep instead (without manual address correction option)"
      operationId: postBatchroutingById
      tags:
        - Route
      parameters:
        - in: path
          name: process_id
          description: ID of the upload process which was initially started via POST /upload/{process_id}
          required: true
          type: string
      responses:
        200:
          description: success message and initial status of the routing process
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /process/status/{process_id}/{action_id}:
    get:
      summary: Process status (id,id)
      description: |
        "Returns the current status of an automated routing process. This can be used for polling the progress of a long running multiple routes calculation. An initial process needs to be started beforehand via POST /upload/{routingtype}. The returned process ID is used for identifying this process. The action ID defines the action within this process for which the status is requested (read_excel, routing or update_excel)"
      operationId: getProcessStatusByIdById
      tags:
        - Route
      parameters:
        - in: path
          name: process_id
          description: ID of the upload process which was initially started via POST /upload/{process_id}
          required: true
          type: string
        - in: path
          name: action_id
          description: ID of the requested action
          required: true
          type: string
          enum: [
            read_excel,
            routing,
            update_excel
          ]
      responses:
        200:
          description: current status of the requested action within the requestedrouting process
          schema:
            $ref: '#/definitions/Processstatus'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /cancelroute/{route_id}:
    post:
      summary: Cancel route (id)
      description: "Cancels an unfinished route because of an unplanned event (e.g. driver is no more available). The route will be moved to the route archive and all unfinished (not yet delivered an not yet cancelled) deliveries will be retuned to the active deliveries list (delivery status is set to 'none'). These deliveries are then available for re-routing in a new tour"
      operationId: postCancelrouteById
      tags:
        - Route
      parameters:
        - in: path
          name: route_id
          description: Route ID
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"

  /dispatchlogs:
    get:
      summary: Dispatch logs
      description: |
        Retrieve current dispatcher alerts and log messages, i.e. warnings and information about current deliveries, routes and drivers (e.g. successfully or failed deliveries, delayed drivers, traffic incidents on a route etc.)
      operationId: getDispatchlogs
      tags:
      - Controlling
      parameters:
      - in: query
        name: limit
        description: "Limit for the number of recent log messages."
        required: false
        type: integer
        format: int32
        default: 20
      responses:
        200:
          description: Accouting information
          schema:
            $ref: '#/definitions/Dispatchlogs'
        403:
          $ref: "#/responses/MissingAuthorization"
        default:
          $ref: "#/responses/UnexpectedError"
  /dispatchlogs/action:
    get:
      summary: Dispatchlogs action
      description: "Get dispatchlogs action summary."
      operationId: getDisptachlogsAction
      tags:
        - Controlling
      parameters:
      - in: query
        name: limit
        description: "Limit for the number of recent log messages."
        required: false
        type: integer
        format: int32
        default: 20
      responses:
        200:
          description: Accouting information
          schema:
            $ref: '#/definitions/Dispatchlogactions'
        403:
          $ref: "#/responses/MissingAuthorization"
        default:
          $ref: "#/responses/UnexpectedError"
  /dispatchlogs/action/{dispatchlogs_id}:
    patch:
      summary: Dispatch logs action (id)
      description: "Checks dispatch log API"
      operationId: patchDisptachlogsActionById
      parameters:
        - in: path
          name: dispatchlogs_id
          description: Dispatchlog ID
          required: true
          type: integer
          format: int32
      tags:
        - Controlling
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        default:
          $ref: "#/responses/UnexpectedError"
  /analyze:
    get:
      summary: Analyze
      description: "Receives delivery statistics"
      operationId: getAnalyze
      tags:
        - Controlling
      parameters:
        - in: query
          name: type
          description: "Analysis type to aggregate on (either 'delivered' or 'punctual')."
          required: false
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DeliveryStatistic'
        403:
          $ref: "#/responses/MissingAuthorization"
        default:
          $ref: "#/responses/UnexpectedError"
  /plzarea:
    get:
      summary: Plz area
      description: "Gets all postal code (PLZ) areas as GeoJSON Polygons and the referring postal code value from the database. Warning: The number of areas and their referring geo objects amount to a huge data set, data should always be filtered. Pagination is activated so that never more than 10 areas are returned at once."
      operationId: getPlzarea
      tags:
        - Route
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Plzareas"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /tourarea:
    get:
      summary: Tour area
      description: "Gets all tour areas as GeoJSON Multipolygons from the database. Tour areas are usually aggregated from one one or more postal code (PLZ) areas but can also be any other arbitrary geographical (Multi)Polygon. Tour areas can be assigned to one driver each so that the referring driver for a tour area can automatically be assigned to the tour which is created from deliveries/addresses located in this area."
      operationId: getTourarea
      tags:
        - Route
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Tourareas"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /tourarea/{tourarea_id}:
    patch:
      summary: Tour area (id)
      description: |
        Edits/patches tour area information.
      operationId: patchTourareaById
      tags:
        - Route
      parameters:
        - in: body
          name: tourarea
          required: true
          schema:
            $ref: "#/definitions/Tourarea"
        - in: path
          name: tourarea_id
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /areafromplz:
    post:
      summary: Area from plz
      description: |
        Aggregates multiple postal code areas into one area which afterwards can be used for tour calculation and driver assignment.
      operationId: postAreafromplz
      tags:
        - Route
      parameters:
        - in: body
          name: body
          description: postal code list
          required: true
          schema:
            type: object
            properties:
              plz_list:
                description: a list of postal codes which shall be aggregated to one tour area
                type: array
                items:
                  type: string
              items:
                type: string
      responses:
        201:
          description: OK, new tour area successfully created
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /plzareas:
    get:
      summary: Plz areas
      description: "Not yet implemented"
      operationId: getPlzareas
      tags:
        - Route
      responses:
        200:
          description: OK
  /task:
    get:
      summary: Task
      description: "Get Task"
      operationId: getTask
      tags:
        - Controlling
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Task"
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /taskhistogram:
    get:
      summary: Task histogram
      description: |
        Retrieves task entries aggregated by time intervals and task types for billing. At the moment, the only task type considered is the creation of delivery objects, because only those are relevant for price calculation and API usage accounting.
      operationId: getTaskhistogram
      tags:
        - Controlling
      parameters:
        - in: query
          name: type
          description: "A string for the task type to group by (e.g. read or update). Default: all types (read, update, create, delete). At the moment, only create taks are collected in the database."
          required: false
          type: string
        - in: query
          name: entity
          description: "A string for the entity to group by (e.g. deliveries or routes). Default: all entities (see data model).At the moment, only delivery entities are collected in the database."
          required: false
          type: string
        - in: query
          name: intervallength
          description: length of one aggregation interval in minutes (Default 5 minutes)
          required: false
          type: integer
          format: int32
        - in: query
          name: startdate
          description: |
            Earliest start date of first interval. Format ISO 8601 (YYYY-MM-DDThh mm ss+tzh tzm) (Default 10 days back from now). timezone (+tzh tzm) is optional. Default ist local timezone
          required: false
          type: string
          format: dateTime
        - in: query
          name: enddate
          description: |
            latest end date of last interval. Format ISO 8601 (YYYY-MM-DDThh:mm:ss+tzh:tzm) (Default now). timezone ("+tzh:tzm") is optional. Default ist local timezone.
          required: false
          type: string
          format: dateTime
        - in: query
          name: withnull
          description: |
            When False (=Default) only intervals which contain any count value(s) from start date to end date will be returned by the API.
            When True all intervals from start date to end date will be returned. Count for intervals with no task is then always 0.
            Can be combined with all other parameters
          required: false
          type: boolean
      responses:
        200:
          description: Detailed information about tasks and usage history
          schema:
            $ref: '#/definitions/Taskhistograms'
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /accounting:
    get:
      summary: Accounting
      description: |
        Retrieve information about current costs, number of already used tasks, current accounting period etc.
      operationId: getAccounting
      tags:
        - Controlling
      parameters:
        - $ref: "#/parameters/filterQuery"
      responses:
        200:
          description: Accouting information
          schema:
            $ref: '#/definitions/Accountings'
        403:
          $ref: "#/responses/MissingAuthorization"
        default:
          $ref: "#/responses/UnexpectedError"
  /resetpwd:
    post:
      summary: Reset pwd
      description: |
        Triggers the sending of an email with a link to reset the user password.
      operationId: postResetpwd
      tags:
      - Authorization
      parameters:
        - in: body
          name: email
          description: email address of the user to reset the password.
          required: true
          schema:
            type: object
            properties:
              email:
                description: "the user's email address the password reset link will be sent to. Must be the address of an existing user in the database"
                type: string
      responses:
        200:
          description: OK
        default:
          $ref: "#/responses/UnexpectedError"
      security: []
  /resetpwd/{verification_code}:
    post:
      summary: Reset pwd (code)
      description: |
        Resets the users password to a new one, using a verification code which was generated while sending an email to the user in the /resetpwd call.
      operationId: postResetpwdCode
      tags:
      - Authorization
      parameters:
        - in: path
          name: verification_code
          description: The verification code which was sent to the user
          required: true
          type: string
        - in: body
          name: password
          description: The new password of the user.
          required: true
          schema:
            type: object
            properties:
              password:
                description: "The new password which should be set for the user"
                type: string
      responses:
        200:
          description: OK
        default:
          $ref: "#/responses/UnexpectedError"
      security: []
  /signup/dispatcher:
    post:
      summary: Signup dispatcher
      description: |
        "Creates / updates a new dispatcher user in the system. There must already be a user predefined with this email address in the system. The first user initialization is done on request by Smartlane, e.g. via https://www.smartlane.de/registrieren"
      operationId: postSignupDispatcher
      tags:
      - Authorization
      parameters:
        - in: body
          name: userdata
          description: user data of the new dispatcher
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        200:
          description: OK
        default:
          $ref: "#/responses/UnexpectedError"
      security: []
  /registerdriver:
    post:
      summary: Register driver
      description: |
        "Activates a driver from a driver's device after he/she has received a 6 character activation code via email which was generated upon driver object creation by a dispatcher."
      operationId: postRegisterDriver
      tags:
      - Authorization
      parameters:
        - in: body
          name: driver activation data
          description: Email, new password and activation code.
          required: true
          schema:
            type: object
            properties:
              email:
                description: "The drivers email address"
                type: string
              password:
                description: "The authentication password for future use"
                type: string
              code:
                description: "The 6 character activation code which was sent to the driver via Email after a dispatcher has added him/her to the application."
                type: string
      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"

  /activatedriver:
    post:
      summary: Activate driver
      description: |
        "Activates a driver from a driver's device after he/she has received an activation code which was generated upon driver object creation by a dispatcher. Please note that there can be a delay of up to a couple of hours between driver creation in the dispatcher application and the SMS being sent to the driver because of internal user validations"
      operationId: postActivatedriver
      tags:
      - Authorization
      deprecated: true
      parameters:
        - in: body
          name: driver activation data
          description: activation code and device number (IMEI) of the drivers device.
          required: true
          schema:
            type: object
            properties:
              code:
                description: "The activation code which was sent to the driver via SMS after a dispatcher has added him/her to the application."
                type: string
              imei:
                description: "The [IMEI](https://en.wikipedia.org/wiki/International_Mobile_Equipment_Identity) (device number) of the driver's device. A driver can later always automatically login if the devices IMEI is read by the login application. This is e.g. always done by the SmartlaneDISPATCH! driver smartphone app."
                type: string

      responses:
        200:
          description: OK
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
      security: []
  /driverauth:
    post:
      summary: Driver auth
      description: |
        "Retrieves a fresh JWT authorization token for the driver user with a given IMEI (device number)"
      operationId: postDriverauth
      tags:
      - Authorization
      parameters:
        - in: body
          name: driver login data
          description: device number (IMEI) of the drivers device.
          required: true
          schema:
            type: object
            properties:
              IMEI:
                description: "The IMEI (device number. http://www.imei.info/) of the driver's device. A driver can automatically be logged in if the devices IMEI is read by the login application. This is e.g. always done by the SmartlaneDISPATCH! driver smartphone app."
                type: string

      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              token:
                description: "The JWT token of the drive which can be used for maing calls on the SmartlaneDISPATCH! API."
                type: string
              driver_id:
                description: "The id of the driver which is logged in."
                type: integer
                format: int32
        403:
          $ref: "#/responses/MissingAuthorization"
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
      security: []
  /tokenexpiry:
    post:
      summary: Token expiry
      description: |
        "Gets the expiry time of the current user's token. It is automatically read out of the Auuthorization header."
      operationId: postTokenexpiry
      tags:
      - Authorization
      responses:
        200:
          description: the token expiry time as ISO time format string
          schema:
            type: string
            format: dateTime
        401:
          description: A failure message caused by missing authentication
          schema:
            type: string
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /refreshtoken:
    get:
      summary: Refresh token
      description: "Refreshes the user's current token by generating a new one which is valid from now."
      operationId: getRefreshToken
      tags:
      - Authorization
      responses:
        200:
          description: "New token, valid from now."
          schema:
            type: string
        401:
          description: A failure message caused by missing authentication
          schema:
            type: object
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
  /connectioncheck:
    get:
      summary: Connection check
      description: "Checks if the server has internet connection."
      operationId: getConnectionCheck
      tags:
      - Admin
      responses:
        200:
          description: "Returns status code of request to www.google.de"
          schema:
            type: string
        default:
          $ref: "#/responses/UnexpectedError"
  /dumps:
    get:
      summary: Dumps
      description: "Returns a database dump."
      operationId: getDumps
      tags:
        - Admin
      responses:
        200:
          description: "List of current database dumps or 'nothing found'."
          schema:
            type: string
        default:
          $ref: "#/responses/UnexpectedError"
  /dumps/create:
    get:
      summary: Dumps create
      description: "Creates a database dump."
      operationId: getDumpsCreate
      tags:
        - Admin
      responses:
        200:
          description: "DB dump successfully created."
        default:
          $ref: "#/responses/UnexpectedError"
  /dumps/restore:
    post:
      summary: Dumps restore
      description: "Restores a database dump"
      operationId: postDumpsRestore
      tags:
        - Admin
      parameters:
        - in: body
          name: body
          description: Address information, body either contains a freesearchtext field or address information
          required: true
          schema:
            type: object
            properties:
              dumpfile:
                type: string
                description: "Name of dumpfile"
      responses:
        201:
          description: DB dump successfully restored
        422:
          $ref: "#/responses/InvalidInput"
        default:
          $ref: "#/responses/UnexpectedError"
definitions:
  Companies:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Company'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Company:
    type: object
    properties:
      id:
        type: integer
      companyname:
        type: string
      location_id:
        description: reference to Address
        type: integer
        format: int32
      pricing_package:
        type: integer
        format: int32
  NewUser:
    type: object
    required:
      - activationcode
      - email
      - firstname
      - lastname
      - password
      - companyname
    properties:
      activationcode:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      companyname:
        type: string
      companycity:
        type: string
      companystreet:
        type: string
      companyhousenumber:
        type: string
      companypostalcode:
        type: string
      companycountry:
        type: string
      companyboundingbox:
        type: string
  Dispatchers:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Dispatcher'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Dispatcher:
    type: object
    properties:
      id:
        type: integer
        format: int32
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      company_id:
        description: reference to Company
        type: integer
        format: int32
      expires:
        type: string
        format: date-time
      active:
        type: boolean
      confirmed_at:
        type: string
        format: date-time
      usertype:
        type: string
  AddDispatcher:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
  Drivers:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Driver'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Driver:
    type: object
    properties:
      id:
        type: integer
        format: int32
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
      company_id:
        description: reference to Company
        type: integer
        format: int32
      expires:
        type: string
        format: date-time
      active:
        type: boolean
      confirmed_at:
        type: string
        format: date-time
      usertype:
        type: string
      vehicle:
        description: referce to Vehicletype
        type: integer
        format: int32
      mobilenr:
        type: string
      htmlcolor:
        type: string
        maxLength: 6
  Drivertrackings:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Drivertracking'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Drivertracking:
    type: object
    properties:
      id:
        type: integer
        format: int32
      timestamp:
        type: string
        format: date-time
      position:
        $ref: "#/definitions/Location"
      driver_id:
        description: reference to Driver
        type: integer
        format: int32
  Driverpositions:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Driverposition'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Driverposition:
    type: object
    properties:
      id:
        type: integer
        format: int32
      timestamp:
        type: string
        format: date-time
      position:
        $ref: "#/definitions/Location"
      driver_id:
        description: reference to Driver
        type: integer
        format: int32
      firstname:
        type: string
      lastname:
        type: string
      htmlcolor:
        type: string
        maxLength: 6
  Driveravailabilities:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Driveravailability'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Driveravailability:
    type: object
    properties:
      id:
        type: integer
        format: int32
      fromtime:
        type: string
        format: date-time
      totime:
        type: string
        format: date-time
      driver_id:
        description: reference to Driver
        type: integer
        format: int32
  Vehicletypes:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Vehicletype'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Vehicletype:
    type: object
    properties:
      id:
        type: integer
        format: int32
      key:
        type: string
      vehicletypename:
        type: string
  Driverstati:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Driverstatus'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Driverstatus:
    type: object
    properties:
      id:
        type: integer
        format: int32
      key:
        type: string
      statusname:
        type: string

  Routestati:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Routestatus'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32

  Routestatus:
    type: object
    properties:
      id:
        type: integer
        format: int32
      key:
        type: string
      statusname:
        type: string

  Deliveries:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Delivery'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Delivery:
    type: object
    properties:
      id:
        type: integer
        format: int32
      deliveryissuename:
        type: string
      pdt_from:
        type: string
        format: date-time
        description: planned delivery time from
      pdt_to:
        type: string
        format: date-time
        description: planned delivery time to
      eta_from:
        type: string
        format: date-time
        description: estimated time of arrival time window start
      eta_to:
        type: string
        format: date-time
        description: estimated time of arrival time window end
      tdt_from:
        type: string
        format: date-time
        description: target delivery time from (relevant for the driver)
      tdt_to:
        type: string
        format: date-time
        description: target delivery time to (relevant for the driver)
      ddt_from:
        type: string
        format: date-time
        description: driver delivery target time from
      ddt_to:
        type: string
        format: date-time
        description: driver delivery target time to
      ata:
        type: string
        format: date-time
        description: actual time of arrival
      atd:
        type: string
        format: date-time
        description: actual time of delivery
      els:
        type: integer
        format: int32
        description: estimated length of stay in minutes
      als:
        type: number
        description: actual length of stay in minutes
      tfp:
        type: integer
        format: int32
        description: driving time from preceding delivery
      creationtime:
        type: string
        format: date-time
      deliverprio:
        type: integer
        format: int32
      orderindex:
        type: integer
        format: int32
      load:
        type: string
      notes:
        type: string
      custom_id:
        type: string
      custom_tour:
        type: string
      drivernotes:
        type: string
      final:
        type: boolean
        default: false
      vehicle:
        type: string
        default: "car"
      scancode:
        type: string
      notify_customer:
        type: boolean
        default: false
      deliverylocation_id:
        description: reference to Address
        type: integer
        format: int32
      supplierlocation_id:
        description: reference to Address
        type: integer
        format: int32
      delivery_address:
        $ref: "#/definitions/Location"
      supplier_address:
        $ref: "#/definitions/Location"
      route_id:
        description: reference to Route
        type: integer
        format: int32
      status:
        description: reference to Deliverystatus
        type: integer
        format: int32
      code:
        type: integer
        format: int32
        description: reference to Deliverycode
      distances:
        description: Deprecated. JSON object containing distances to other deliveries on the same route
        type: string

  Deliverystatus:
    type: object
    properties:
      id:
        type: integer
        format: int32
      key:
        type: string
      statusname:
        type: string
  Deliverystati:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Deliverystatus'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32

  Deliverycode:
    type: object
    properties:
      id:
        type: integer
        format: int32
      key:
        type: string
      action:
        type: string
  Deliverycodes:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Deliverycode'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32

  Livedelivery:
    description: "Address, eta and the current postion of the driver serving the delivery. If no driver postion can be found, driverinfo is set to the message 'No driver tracking found on this route'"
    type: object
    properties:
      id:
        type: string
      address:
        $ref: "#/definitions/Address"
      eta:
        type: string
        format: date-time
      driverinfo:
        $ref: "#/definitions/Drivertracking"

  Location:
    type: object
    properties:
      coordinates:
       type: array
       items:
        type: number
      type:
        type: string
  Linestring:
    type: object
    properties:
      coordinates:
       type: array
       items:
          $ref: '#/definitions/Location'
      type:
        type: string
  Polygon:
    type: object
    properties:
      coordinates:
       type: array
       items:
        type: integer
        format: int64
      type:
        type: string
  Multipolygon:
    type: object
    properties:
      coordinates:
       type: array
       items:
        type: integer
        format: int64
      type:
        type: string
  Addresses:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Address'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Address:
    type: object
    properties:
      id:
        type: integer
      city:
        type: string
      contactcompany:
        type: string
      contactfirstname:
        type: string
      contactlastname:
        type: string
      country:
        type: string
      email:
        type: string
      housenumber:
        type: string
      location:
        $ref: "#/definitions/Location"
      phonenr:
        type: string
      postalcode:
        type: string
      street:
        type: string
  GeocodeRequest:
    type: object
    properties:
      freesearchtext:
        type: string
      city:
        type: string
      postalcode:
        type: string
      street:
        type: string
      housenumber:
        type: string
      country:
        type: string
      boundingbox:
        type: string
  Geocode:
    type: object
    properties:
      location:
        type: object
        properties:
          "type":
            type: string
            default: "Point"
          coordinates:
            type: object
            properties:
              lng:
                type: string
              lat:
                type: string
          crs:
            type: object
            properties:
              "type":
                type: string
                default: name
              "properties":
                type: object
                properties:
                  "name":
                    type: string
                    default: "EPSG:4326"
  Routes:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Route'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Route:
    type: object
    properties:
      id:
        type: integer
        format: int32
      creationtime:
        type: string
        format: date-time
      ast:
        description: Actual start time
        type: string
        format: date-time
      tst_from:
        description: Target start time span (beginning)
        type: string
        format: date-time
      tst_to:
        description: Target start time span (end)
        type: string
        format: date-time
      distance:
        description: Complete length of route in meters
        type: integer
        format: int32
      driver_id:
        type: integer
        format: int32
      gross_duration:
        description: "Complete duration of tour, including length of driver's stays in minutes"
        type: integer
        format: int32
      net_duration:
        description: Pure driving time in minutes
        type: integer
        format: int32
      status:
        type: integer
        format: int32
      deliveries:
        type: array
        items:
          $ref: "#/definitions/Delivery"
      custom_id:
        type: integer
        format: int32
      previous_deliveries:
        description: When deliveries are removed or changed, they are saved here
        type: array
        items:
          $ref: "#/definitions/Delivery"
      previous_drivers:
        description: List of drivers that were previously assigned
        type: array
        items:
          $ref: "#/definitions/Driver"
      pst:
        description: Deprecated. Planed start time
        type: integer
        format: int32
      replaces:
        description: Reference IDs to previous versions, when the route is updated.
        type: integer
        format: int32
      routebase_address:
        $ref: "#/definitions/Address"
      routebase_address_id:
        description: Reference to Address
        type: integer
        format: int32
      routestring:
        description: GeoJSON [LineString](https://geojson.org/geojson-spec.html#linestring) of locations on the route
        $ref: "#/definitions/Location"
      sorted_deliveries:
        description: Deprecated
        type: array
        items:
          $ref: "#/definitions/Delivery"
      areatext:
        type: string
        description: Autogenerated summary of the routes region
  Routemetadatas:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Routemetadata'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Routemetadata:
    type: object
    properties:
      id:
        type: integer
        format: int32
      ast:
        type: string
        format: date-time
      creationtime:
        type: string
        format: date-time
      deliveries:
        type: array
        items:
          type: integer
          format: int32
      distance:
        type: integer
        format: int32
      driver_id:
        description: reference to Driver
        type: integer
        format: int32
      gross_duration:
        type: integer
        format: int32
      htmlcolor:
        type: string
      net_duration:
        type: integer
        format: int32
      pst:
        type: string
        format: date-time
      routebase_address_id:
        description: reference to Address
        type: integer
        format: int32
      status:
        type: integer
        format: int32
  Processstatus:
    type: object
    properties:
      status:
        type: string
      link:
        type: string
      vague_addresses:
       type: array
       items:
        type: string
      meta:
        type: string
  Routedeliverydistances:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Routedeliverydistance'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Routedeliverydistance:
    type: object
    properties:
      ata:
        type: string
        format: date-time
      city:
        type: string
      company:
        type: string
      contactfirstname:
        type: string
      contactlastname:
        type: string
      dist:
        type: number
        format: float
      eta:
        type: string
        format: date-time
      housenumber:
        type: string
      id:
        type: integer
        format: int32
      postalcode:
        type: string
      status:
        type: integer
        format: int32
      street:
        type: string
  Plzareas:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Plzarea'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Plzarea:
    type: object
    properties:
      gid:
        type: integer
        format: int32
      plz:
        type: string
      note:
        type: string
      area_id:
        description: ID of the tour cluster area this plz is aggregated into
        type: integer
        format: int32
      geom:
        $ref: "#/definitions/Polygon"
  Tourareas:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Tourarea'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Tourarea:
    type: object
    properties:
      id:
        type: integer
        format: int32
      driver_id:
        type: string
      geom:
        $ref: "#/definitions/Multipolygon"
  Dispatchlogs:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Dispatchlog'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Dispatchlog:
    type: object
    properties:
      timestamp:
        description: the date and time of the event
        type: string
        format: date-time
      object_id:
        description: ID of the referring object (e.g. Delivery ID, driver ID, route ID)
        type: integer
        format: int32
      level:
        type: string
        description: criticalitiy level of this log message (info, warn or critical)
      message_de:
        description: message text in german language
        type: string
        format: date-time
  Dispatchlogactions:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Dispatchlogaction'
      routes:
        description: route IDs
        type: array
        items:
          type: integer
          format: int32
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Dispatchlogaction:
    type: object
    properties:
      key:
        description: "Either 'delivery_undelivered' or 'driver_problem'"
        type: string
      route_id:
        type: integer
        format: int32
      driver:
        description: "Drivers firstname and abbreviated lastname"
        type: string
      action:
        type: string
  Accountings:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Accounting'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Accounting:
    type: object
    properties:
      basic_charge:
        type: integer
        format: int32
      company_id:
        type: integer
        format: int32
      cost_per_unit:
        type: number
        format: float
      id:
        type: integer
        format: int32
      periodend:
        type: string
        format: date-time
      periodstart:
        type: string
        format: date-time
      units:
        type: integer
        format: int32
  Task:
    type: object
    properties:
      id:
        type: integer
        format: int32
      creationtime:
        type: string
        format: date-time
      entity:
        type: string
      tasktype:
        type: string
      cost:
        type: number
        format: float
      user_id:
        type: string
  Taskhistograms:
    type: object
    properties:
      num_results:
        type: integer
        format: int32
      objects:
        type: array
        items:
          $ref: '#/definitions/Taskhistogram'
      page:
        type: integer
        format: int32
      total_pages:
        type: integer
        format: int32
  Taskhistogram:
    type: object
    properties:
      count:
        type: string
      entity:
        type: string
      intervalend:
        type: string
        format: date-time
      intervalstart:
        type: string
        format: date-time
      tasktype:
        type: string
  DeliveryStatistic:
    type: object
    properties:
      total:
        description: Only for 'delivered'
        type: integer
      target:
        description: Only for 'delivered'
        type: integer
      actual:
        description: Only for 'delivered'
        type: integer
      planned:
        description: Only for 'punctual'
        type: integer
      punctual:
        description: Only for 'punctual'
        type: integer
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

# define reusable parameters:
parameters:
  filterQuery:
    in: query
    name: q
    type: string
    description: |
      Filter query string. Can be used to filter results. [Detailed desciption](/page/api-handling-extras#section-filter-queries)

responses:
  MissingAuthorization:
    description: A failure message caused by missing authorization (403 forbidden)
    schema:
      type: string
  InvalidInput:
    description: >-
      A failure message caused by unprocessable input (e.g. no data found
      for input parameters)
    schema:
      type: string
  UnexpectedError:
    description: Unexpected error
    schema:
      $ref: '#/definitions/Error'
