apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: org.deku.gradle.PackagerPlugin

sourceCompatibility = 1.8
version = '0.9-RELEASE'
mainClassName = "org.deku.leoz.Main"

buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
    }
}

dependencies {
    compile project(':libs:sx-common')
    compile project(':libs:leoz-common')

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-runtime:$v_kotlin"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin"

    // JSR-303 bean validation
    compile "org.hibernate:hibernate-validator:5.2.4.Final"

    // JAX-RS client
    def v_jersey = '2.23'
    compile "org.glassfish.jersey.core:jersey-client:$v_jersey"
    compile "org.glassfish.jersey.ext:jersey-proxy-client:$v_jersey"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$v_jersey"

    // jackson JSON serializer
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$v_jackson"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson"

    // Webservice host libraries (leobridge)
    compile "org.glassfish.jersey.containers:jersey-container-servlet:$v_jersey"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$v_jersey"
    compile "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$v_jersey"

    // JavaFX libs
    compile "com.dooapp.fxform2:core:$v_fxform2"
    compile "org.controlsfx:controlsfx:8.40.10"
    compile "javax.el:javax.el-api:3.0.0"

    testCompile group: 'junit', name: 'junit', version: v_junit
}

//task proguard(type: proguard.gradle.ProGuardTask) {
//    dependsOn(shadowJar)
//    outputs.upToDateWhen { false }
//
//    injars tasks.shadowJar.archivePath
//    outjars new File(tasks.shadowJar.archivePath.getParent().toString(),
//            String.format("%s-%s-proguard.jar", project.name, project.version).toString())
//
//    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
//
//    // Write out an obfuscation mapping file, for de-obfuscating any stack traces
//    // later on, or for incremental obfuscation of extensions.
//    printmapping 'proguard.map'
//
//    // Allow methods with the same signature, except for the return type,
//    // to get the same obfuscation name.
//    overloadaggressively
//
//    // Put all obfuscated classes into the nameless root package.
//    repackageclasses ''
//
//    // Allow classes and class members to be made public.
//    // allowaccessmodification
//
//    dontwarn
//    dontobfuscate
//    dontoptimize
//
//    keep 'class org.deku.leoz.** { *; }'
//    keep 'class com.dooapp.fxform.** { *; }'
//}

// Add resources (like .fxml files) from souce path.
// Non-standard, but nicer to keep .fxml files together with classes
sourceSets.main.resources.srcDir 'src/main/java'

tasks.classes.dependsOn(copySxPlatformDirToBuild)

packager {
    title = "Leoz UI"
    releaseBasePath = g_release_path
    osxIcon = g_osx_icon
    windowsIcon = g_windows_icon
    supplementalPlatformDirs(
            (projectBuildPlatformDir): (platformDirRelative)
    )
}
