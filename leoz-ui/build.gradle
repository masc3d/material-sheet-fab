import org.deku.gradle.PackagerPlugin

apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: PackagerPlugin

sourceCompatibility = 1.8
version = '0.15-SNAPSHOT'
mainClassName = "org.deku.leoz.ui.Application"

buildscript {
    ext {
        v_grizzly = '2.3.28'
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
    }
}

dependencies {
    compile(
            project(':libs:sx-common'),
            project(':leoz-common'),
            project(':libs:sx-fx'),
            project(':libs:sx-discovery'),

            // Common
            "org.apache.commons:commons-lang3:$v_commons_lang",
//            "org.reflections:reflections:0.9.10",
            "net.java.dev.jna:jna-platform:$v_jna",

            // Logging
            "org.slf4j:slf4j-api:$v_slf4j",
            "ch.qos.logback:logback-core:$v_logback",

            // Kotlin
            "org.jetbrains.kotlin:kotlin-runtime:$v_kotlin",
            "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin",

            // Kodein
            "com.github.salomonbrys.kodein:kodein:$v_kodein",
            "com.github.salomonbrys.kodein:kodein-conf:$v_kodein",

            // RX
            "io.reactivex:rxjava:1.2.2",
            "io.reactivex:rxkotlin:0.60.0",
            "io.reactivex:rxjavafx:0.3.0",
            "com.github.thomasnield:rxkotlinfx:0.3.0",
            "org.reactfx:reactfx:2.0-M5",

            // JavaFX libs

            // Lightweight kotlin/javafx framework. TODO: only for EVALUATION and reference for now
//            "no.tornado:tornadofx:1.5.6",
            // For automatic fx forms generation
            "com.dooapp.fxform2:core:$v_fxform2",
            // FX controls
            "org.controlsfx:controlsfx:8.40.12",
            // RichTextFX
//            "org.fxmisc.richtext:richtextfx:0.7-M2",

            // JSR-303 bean validation
            "org.glassfish:javax.el:3.0.0",
            "org.hibernate:hibernate-validator:5.3.2.Final",

            // JAX-RS
            "javax.ws.rs:javax.ws.rs-api:$v_javax_ws_rs",

            // REST client
//            "org.jboss.resteasy:resteasy-client:$v_resteasy",
//            "org.jboss.resteasy:resteasy-jackson2-provider:$v_resteasy",
            "org.glassfish.jersey.core:jersey-client:$v_jersey",
            "org.glassfish.jersey.ext:jersey-proxy-client:$v_jersey",
            "org.glassfish.jersey.media:jersey-media-json-jackson:$v_jersey",

            // jackson JSON serializer
            "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$v_jackson",
            "com.fasterxml.jackson.core:jackson-core:$v_jackson",
            "com.fasterxml.jackson.core:jackson-databind:$v_jackson",

            // Webservice host libraries (leobridge)
            "org.glassfish.grizzly:grizzly-http-server:$v_grizzly",
            "org.glassfish.jersey.core:jersey-server:$v_jersey",
            "org.glassfish.jersey.media:jersey-media-json-jackson:$v_jersey",
            "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$v_jersey"
    )

    testCompile(
            "junit:junit:$v_junit"
    )
}

//task proguard(type: proguard.gradle.ProGuardTask) {
//    dependsOn(shadowJar)
//    outputs.upToDateWhen { false }
//
//    injars tasks.shadowJar.archivePath
//    outjars new File(tasks.shadowJar.archivePath.getParent().toString(),
//            String.format("%s-%s-proguard.jar", project.name, project.version).toString())
//
//    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
//
//    // Write out an obfuscation mapping file, for de-obfuscating any stack traces
//    // later on, or for incremental obfuscation of extensions.
//    printmapping 'proguard.map'
//
//    // Allow methods with the same signature, except for the return type,
//    // to get the same obfuscation name.
//    overloadaggressively
//
//    // Put all obfuscated classes into the nameless root package.
//    repackageclasses ''
//
//    // Allow classes and class members to be made public.
//    // allowaccessmodification
//
//    dontwarn
//    dontobfuscate
//    dontoptimize
//
//    keep 'class org.deku.leoz.** { *; }'
//    keep 'class com.dooapp.fxform.** { *; }'
//}

// Add resources (like .fxml files) from souce path.
// Non-standard, but nicer to keep .fxml files together with classes
sourceSets.main.resources.srcDir 'src/main/java'

tasks.classes.dependsOn(copySxPlatformDirToBuild)

packager {
    title = "Leoz UI"
    releaseBasePath = g_release_path
    osxIcon = g_osx_icon
    windowsIcon = g_windows_icon
    supplementalPlatformDirs(
            (projectBuildPlatformDir): (platformDirRelative)
    )
}
