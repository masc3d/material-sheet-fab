import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

buildscript {
    ext {
        v_swagger_codegen = '2.2.3'
    }
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
        classpath "io.swagger:swagger-codegen:$v_swagger_codegen"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'

group = 'org.deku.leoz'
version = '1.0'
sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

//region Constants
def GENERATED_DIR = file('src/generated')
def GENERATED_SMARTLANE_DIR = new File(GENERATED_DIR, 'smartlane')
//endregion

repositories {
    mavenCentral()
}

//region Prototype test setup
test {
    useJUnit {
        includeCategories 'sx.junit.StandardTest', 'sx.junit.PrototypeTest'
    }
}

sourceSets {
    main {
        java {
            srcDirs += GENERATED_SMARTLANE_DIR
        }
    }
    test {
        java {
            srcDirs += file('src/prototype/java')
        }
    }
}
//endregion

dependencies {
    compile(
            project(':sx-common'),
            project(':sx-serialization'),
            project(':sx-mq'),
            "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin",

            // Kodein
            "com.github.salomonbrys.kodein:kodein:$v_kodein",
            "com.github.salomonbrys.kodein:kodein-erased:$v_kodein",
            "com.github.salomonbrys.kodein:kodein-core:$v_kodein",
            "com.github.salomonbrys.kodein:kodein-conf:$v_kodein",

            // i18n additions, eg. ISO 3166-1 country codes
            "com.neovisionaries:nv-i18n:1.22"
    )

    compileOnly(
            // JSR-310 / java.time drop-in replacement
            "org.threeten:threetenbp:$v_threeten",

            // Swagger for json doc
            "io.swagger:swagger-annotations:$v_swagger",
            "io.swagger:swagger-jaxrs:$v_swagger",

            // Jackson
            "com.fasterxml.jackson.core:jackson-databind:$v_jackson",
            "com.fasterxml.jackson.core:jackson-annotations:$v_jackson",

            // JAX-RS
            "javax.ws.rs:javax.ws.rs-api:2.0.1",

            // REST
            "io.github.openfeign:feign-core:$v_feign",
            "io.github.openfeign:feign-jaxrs:$v_feign",
            "io.github.openfeign:feign-okhttp:$v_feign",

            // YAML
            "org.yaml:snakeyaml:$v_snakeyaml",

            // MQTT client
            "org.eclipse.paho:org.eclipse.paho.client.mqttv3:$v_paho",

            // Kryo
            "com.esotericsoftware:kryo:$v_kryo",
            "de.javakaffee:kryo-serializers:$v_kryo_serializers",

            dependencies.create("io.socket:socket.io-client:$v_socketio") {
                // excluding org.json which is provided by Android
                exclude group: 'org.json', module: 'json'
            },

            // Logging
            "ch.qos.logback:logback-classic:$v_logback",

            "io.swagger:swagger-codegen:$v_swagger_codegen",
            "org.apache.cxf:cxf-rt-frontend-jaxrs:$v_apache_cxf"
    )

    testCompile(
            "junit:junit:$v_junit",
            "ch.qos.logback:logback-classic:$v_logback",

            // REST
            "io.github.openfeign:feign-core:$v_feign",
            "io.github.openfeign:feign-jackson:$v_feign",
            "io.github.openfeign:feign-jaxrs:$v_feign",
            "io.github.openfeign:feign-okhttp:$v_feign",

            // Jackson
            "com.fasterxml.jackson.core:jackson-databind:$v_jackson",
            "com.fasterxml.jackson.core:jackson-annotations:$v_jackson",

            // MQTT client
            "org.eclipse.paho:org.eclipse.paho.client.mqttv3:$v_paho"
    )
}

def swaggerOutputDir = file('build/swagger')

task smartlaneGenerateSwaggerApi {
    def swaggerInput = file('src/main/resources/api/smartlane_openapi.yaml')

    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput.toString())
        config.setOutputDir(swaggerOutputDir.path)
        config.apiPackage = "org.deku.leoz.smartlane.api"
        config.modelPackage = "org.deku.leoz.smartlane.model"
        config.setLang('jaxrs-cxf')
        config.setAdditionalProperties([
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task smartlaneGenerate(type: Sync) {
    from swaggerOutputDir.toPath()
            .resolve('src')
            .resolve('gen')
            .resolve('java')
            .toFile()

    into GENERATED_DIR.toPath()
            .resolve('smartlane')
            .toFile()

    dependsOn smartlaneGenerateSwaggerApi
}

tasks.compileJava.dependsOn smartlaneGenerate
tasks.compileKotlin.dependsOn smartlaneGenerate

clean.doFirst {
    delete(GENERATED_DIR)
}

