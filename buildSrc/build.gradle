buildscript {
    ext {
        // Versions
        v_activemq = "5.+"
        v_kotlin = "1.+"
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"
    }

    repositories {
        mavenCentral()
    }

}

apply plugin: 'java'
apply plugin: 'kotlin'

repositories {
    mavenCentral()
}

configurations {
    provided {
        dependencies.all { dep ->
            configurations.default.exclude group: dep.group, module: dep.name
        }
    }
    compile.extendsFrom provided
}

dependencies {
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-runtime:$v_kotlin"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$v_kotlin"

    compile "org.apache.commons:commons-lang3:3.+"
    compile "org.apache.commons:commons-compress:+"
    compile "commons-io:commons-io:2.+"
    compile "org.tukaani:xz:+"
    compile "org.eclipse.jgit:org.eclipse.jgit:4.+"
    compile 'com.google.guava:guava:18.+'
    compile 'org.ini4j:ini4j:+'

    // For authenticating ssh/jgit against key agent
    compile 'com.jcraft:jsch.agentproxy.connector-factory:+'
    compile 'com.jcraft:jsch.agentproxy.jsch:+'
    compile 'com.jcraft:jsch.agentproxy.sshagent:+'
    compile 'com.jcraft:jsch.agentproxy.pageant:+'


    // Unused deps required for compilation
    provided "javax.ws.rs:javax.ws.rs-api:2.+"
    provided "ch.qos.logback:logback-classic:+"
    provided "javax.servlet:javax.servlet-api:+"
    provided "org.apache.activemq:activemq-broker:$v_activemq"
    provided "org.apache.activemq:activemq-kahadb-store:$v_activemq"
    provided "org.apache.activemq:activemq-leveldb-store:$v_activemq"
    provided "org.apache.activemq:activemq-jms-pool:$v_activemq"
    provided "org.apache.activemq:activemq-jaas:$v_activemq"
    provided "org.apache.activemq:activemq-mqtt:$v_activemq"
    provided("org.apache.activemq:activemq-http:$v_activemq") {
        exclude group: 'org.springframework'
        exclude group: 'org.apache.activemq', module: 'activemq-spring'
        exclude group: 'org.eclipse.jetty.aggregate'
    }
    provided 'org.springframework:spring-jms:4.+'
    provided 'com.esotericsoftware:kryo:3.+'
    provided 'org.xerial.snappy:snappy-java:+'
    provided "com.wordnik:swagger-annotations:+"

}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'

    // See workaround below
    //main.java.srcDirs += '../libs/sx-common/src/main/java'
    //main.java.srcDirs += '../libs/leoz-common/src/main/java'
}

// TODO: workaround for intellij's inability of having sources outside the content root of a module
// https://youtrack.jetbrains.com/issue/IDEA-122577
// TODO: remove as soon as fix is released in IntelliJ 15.1
def srcdir_import = file("$projectDir/src/import/java")

sourceSets {
    main.java.srcDirs += srcdir_import
    main.java.srcDirs += 'src/main/kotlin'
}

// Task for importing classes from other projects
task syncClasses(type: Sync) {
    from '../libs/leoz-common/src/main/java', '../libs/sx-common/src/main/java'
    into srcdir_import
    //include '**/bundle/**', '**/rsync/**', '**/system/**', '**/ProcessExecutor*', '**/Disposable*/', '**/EmbeddedExecutable*/', '**/Action*/', '**/platform/**', '**/Bundle'
    includeEmptyDirs = false
}

// Clean build directory if class sync task performed action
tasks.syncClasses.doLast {
    new File(project.projectDir, 'build').deleteDir()
}

// Copy classes before compilation
compileJava.dependsOn(syncClasses)
compileKotlin.dependsOn(syncClasses)
