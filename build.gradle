import org.gradle.logging.ShowStacktrace
import sx.platform.PlatformId

import java.nio.file.Paths

version = '0.1'

apply from: 'versions.gradle'

buildscript {
    ext {
        // Versions
        v_jooq = "3.+"
        v_kotlin = "1.+"
        v_mysql = "5.+"

        // Leoz release path, relative to root project
        g_platform_identifier = PlatformId.current().toString()

        g_release_path = Paths.get(project.rootDir.toURI())
                .parent
                .resolve("leoz-release")
                .toFile()

        g_bin_path = new File(project.rootDir, 'bin')

        g_osx_icon = Paths.get(project.rootDir.toURI())
                .resolve('images')
                .resolve('DEKU.icon.icns')
                .toFile()

        g_windows_icon = Paths.get(project.rootDir.toURI())
                .resolve('images')
                .resolve('DEKU.icon.ico')
                .toFile()
    }

    dependencies {
        // Kotlin
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$v_kotlin"

        // jooq codegen gradle plugin
        classpath 'com.github.ben-manes:gradle-jooq-plugin:+'

        // override jooq dependencies of gradle-jooq-plugin with desired version
        classpath("org.jooq:jooq-codegen:$v_jooq") { force true }
        classpath("org.jooq:jooq-meta:$v_jooq") { force true }

        // mysql jdbc connector
        classpath "mysql:mysql-connector-java:$v_mysql"
    }

    repositories {
        jcenter()
        mavenCentral()
    }}

// Start parameters
gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

// Common configuration for subprojects
subprojects {
    apply plugin: 'java'
    apply plugin: 'project-report'

    // Reporting setup
    // Dependency report depends on classes but only if compilation actually took place (not uptodate)
    tasks.classes.finalizedBy(/*testTask, */tasks.dependencyReport, tasks.htmlDependencyReport)
    tasks.dependencyReport.onlyIf { !tasks.classes.state.upToDate }
    tasks.htmlDependencyReport.onlyIf { !tasks.classes.state.upToDate }

    projectReportDirName = new File(project.projectDir, 'reports').toString()

    // Global repositories
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url 'https://repository-bubblecloud.forge.cloudbees.com/release/' }
        mavenCentral()
    }

    // Global jar configuration
    tasks.jar.doFirst {
        jar {
            manifest {
                if (project.hasProperty('mainClassName')) {
                    attributes(
                        'Main-Class': project.mainClassName
                    )
                }

                attributes (
                        'Implementation-Name': project.name,
                        'Implementation-Version': project.version,
                        'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
                )
            }

            entryCompression ZipEntryCompression.STORED
        }
    }

    // Global dependency resolution
    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()

            // Force overrides for newer versions of (transitive) dependencies for all projects consistently
            // Version overrides
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.group.startsWith('ch.qos.logback')) {
                    details.useVersion v_logback
                } else
                if (details.requested.group.startsWith('com.fasterxml.jackson')) {
                    details.useVersion v_jackson
                } else
                if (details.requested.group == 'com.google.guava') {
                    details.useVersion v_guava
                } else
                if (details.requested.group == 'com.mysema.querydsl') {
                    details.useVersion v_querydsl
                } else
                if (details.requested.group == 'com.vaadin') {
                    if (details.requested.name.startsWith('vaadin-sass')) {
                        details.useVersion v_vaadin_sass
                    } else if (details.requested.name.startsWith('vaadin-spring')) {
                        details.useVersion v_vaadin_spring
                    } else {
                        details.useVersion v_vaadin
                    }
                } else
                if (details.requested.group == 'javax.activation') {
                    details.useVersion '1.+'
                }
                if (details.requested.group == 'javax.servlet') {
                    details.useVersion v_javax_servlet
                } else
                if (details.requested.group == 'junit') {
                    details.useVersion v_junit
                } else
                if (details.requested.group == 'net.java.dev.jna') {
                    details.useVersion v_jna
                } else
                if (details.requested.group == 'org.apache.activemq') {
                    details.useVersion v_activemq
                } else
                if (details.requested.group == 'org.apache.httpcomponents') {
                    details.useVersion '4.+'
                } else
                if (details.requested.group == 'org.eclipse.jgit') {
                    details.useVersion v_jgit
                } else
                if (details.requested.group.startsWith('org.glassfish.jersey')) {
                    details.useVersion v_jersey
                } else
                if (details.requested.group == 'org.hamcrest') {
                    details.useVersion '1.+'
                } else
                if (details.requested.group == 'org.hibernate') {
                    details.useVersion v_hibernate
                } else
                if (details.requested.group == 'org.fusesource.hawtbuf') {
                    details.useVersion v_hawtbuf
                } else
                if (details.requested.group == 'org.fusesource.hawtdispatch') {
                    details.useVersion v_hawtdispatch
                } else
                if (details.requested.group == 'org.iq80.leveldb') {
                    details.useVersion v_leveldb
                } else
                if (details.requested.group == 'org.javassist') {
                    details.useVersion '3.+'
                } else
                if (details.requested.group == 'org.jetbrains.kotlin') {
                    details.useVersion v_kotlin
                } else
                if (details.requested.group == 'org.jboss.resteasy') {
                    details.useVersion v_resteasy
                } else
                if (details.requested.group == 'org.scala-lang') {
                    details.useVersion v_scala
                } else
                if (details.requested.group == 'org.slf4j') {
                    details.useVersion v_slf4j
                } else
                if (details.requested.group == 'org.springframework') {
                    details.useVersion v_spring
                } else
                if (details.requested.group == 'org.springframework.boot') {
                    details.useVersion v_springboot
                } else
                if (details.requested.group == "org.springframework.data") {
                    if (details.requested.name == 'spring-data-commons') {
                        details.useVersion v_spring_data_commons
                    } else if (details.requested.name == 'spring-data-jpa') {
                        details.useVersion v_spring_data_jpa
                    }
                } else
                if (details.requested.group == 'org.xerial.snappy') {
                    details.useVersion '1.+'
                } else
                if (details.requested.group == 'org.yaml') {
                    details.useVersion '1.+'
                }
            }

            force "commons-codec:commons-codec:1.+"
            force "commons-io:commons-io:$v_commons_io"
            force "commons-logging:commons-logging:1.+"
            force "commons-lang:commons-lang:2.+"
            force "commons-collections:commons-collections:3.+"
            force "commons-httpclient:commons-httpclient:3.+"
            force "com.google.guava:guava:$v_guava"
            force "com.esotericsoftware:kryo:$v_kryo"
            force "com.thoughtworks.xstream:xstream:1.+"
            force "javax.validation:validation-api:$v_javax_validation"
            force "org.apache.commons:commons-lang3:$v_commons_lang"
            force "org.eclipse.persistence:javax.persistence:$v_javax_persistence"
            force "org.jboss.logging:jboss-logging:3.+"
            force "org.jboss.logging:jboss-logging-annotations:1.+"
            force "com.jcraft:jsch:+"
        }
    }

    ext {
        globalPlatformDir = new File(project.rootDir, 'platform')
        sxPlatformDir = new File(project(':libs:sx-common').projectDir, 'platform')

        projectBuildSupplementalsDir = new File(project.buildDir, 'supplementals')
        projectBuildPlatformDir = new File(projectBuildSupplementalsDir, 'platform')
        projectBuildCurrentPlatformDir = new File(projectBuildPlatformDir, g_platform_identifier)
        platformDirRelative = new File('platform')

        projectPlatformDir = new File(project.projectDir, 'platform')
    }

    /**
     * Task copying platform specific files from sx-common to project dir
     */
    task copySxPlatformDirToProject(type: Copy) {
        from sxPlatformDir
        into projectPlatformDir
        // Rename generic name to leoz specific process name, as it's easier to handle,
        // when eg. looking at process names while leoz is running
        rename 'sx-rsync(.*)', 'leoz-rsync$1'
    }

    /**
     * Task copying platform specific files from sx-common to project build dir
     */
    task copySxPlatformDirToBuild(type: Copy) {
        from sxPlatformDir
        into projectBuildPlatformDir
        // Rename generic name to leoz specific process name, as it's easier to handle,
        // when eg. looking at process names while leoz is running
        rename 'sx-rsync(.*)', 'leoz-rsync$1'
    }
    tasks.copySxPlatformDirToBuild.dependsOn(tasks.copySxPlatformDirToProject)

    /**
     * Task copying architecture specific global files to project dri
     */
    task copyGlobalPlatformDirToProject(type: Copy) {
        from globalPlatformDir
        into projectPlatformDir
    }

    /**
     * Task copying architecture specific global files to project build dir
     */
    task copyGlobalPlatformDirToBuild(type: Copy) {
        from globalPlatformDir
        into projectBuildPlatformDir
    }
    tasks.copyGlobalPlatformDirToBuild.dependsOn(tasks.copyGlobalPlatformDirToProject)
}

// Data(base) sources in intellij contain hashes which are updated every time the IDE updates
// To avoid having a vcs change to reset every time, this configuration was moved to a separate file
// which is copied on each gradle run. Implies that _when_ datasources are updated (rare) the
// config file below needs to be updated manually.
task copyIntellijDataSources(type: Copy) {
    def ideaWorkspaceDir = '.idea'
    def dataSourcesPresetFile = 'dataSources.preset.xml'
    def dataSourcesFile = 'dataSources.xml'

    if (!new File(ideaWorkspaceDir, dataSourcesFile).exists())
        copy {
            from(ideaWorkspaceDir)
            into(ideaWorkspaceDir)
            include dataSourcesPresetFile
            rename dataSourcesPresetFile, dataSourcesFile
        }
}
tasks.copyIntellijDataSources.execute()

