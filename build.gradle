import sx.packager.BundleRepository
import sx.platform.PlatformId
import sx.ssh.SshTunnelProvider
import sx.ssh.SshHost
import sx.rsync.Rsync
import java.lang.management.ManagementFactory
import java.nio.file.Files
import java.nio.file.Paths

apply from: 'versions.gradle'

def assertJvmVersion(String vmVersion) {
    def jvm = ManagementFactory.getRuntimeMXBean()
    println("JVM version [${jvm.specVersion}] [${jvm.vmVersion}]")
    if (!jvm.vmVersion.startsWith(vmVersion))
        throw new IllegalStateException("JVM/JDK version is [${jvm.vmVersion}], should start with [${vmVersion}]")
}

assertJvmVersion(v_jvm)

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'leoz-build/repo'
        }
    }

    dependencies {
        classpath "sx:sx-ssh:0.1"
        classpath "sx:sx-packager-gradle:0.1"
        classpath "sx:sx-serialization:0.1"

        classpath(
                "ca.cutterslade.gradle:gradle-dependency-analyze:1.1.0",
                'com.github.ben-manes:gradle-versions-plugin:0.13.0',
                'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
        )
    }
}

ext {
    // Leoz release path, relative to root project
    g_platform_identifier = PlatformId.current().toString()

    g_release_path = Paths.get(project.rootDir.toURI())
            .resolve("release")
            .toFile()

    g_bin_path = new File(project.rootDir, 'bin')

    g_osx_icon = Paths.get(project.rootDir.toURI())
            .resolve('images')
            .resolve('DEKU.icon.icns')
            .toFile()

    g_windows_icon = Paths.get(project.rootDir.toURI())
            .resolve('images')
            .resolve('DEKU.icon.ico')
            .toFile()

    g_vm_dist_path = project.rootDir.toPath()
            .resolve('vm')
            .resolve('dist')
            .toFile()
}

apply plugin: 'java'

// Common configuration for all subprojects (including android)
subprojects {
    // Common subproject buildscript configuration
    buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }
    }

    // Global repositories
    repositories {
        mavenCentral()
        jcenter()
    }

    // For generating dependency reports
    apply plugin: 'project-report'
    // Plugin for showing dependency updates
    apply plugin: 'com.github.ben-manes.versions'
    // Plugin for showing code statistics (Sourcefiles, LOC) `gradlew stats`
    apply plugin: 'org.kordamp.gradle.stats'

    // Set boot classpath for all subprojects (eliminates warning in conjunction with setting sourceCompatibility)
    tasks.withType(JavaCompile) {
        options.bootClasspath = ManagementFactory.getRuntimeMXBean().bootClassPath
    }
}

// Common configuration for all non-android subprojects
configure(
        subprojects.findAll { it.path != ':leoz-mobile-app' && it.path != ':libs:sx-android' }
) {
    apply plugin: 'java'
    // Analzye tasks (analyze* for showing unused dependencies eg.)
    apply plugin: 'ca.cutterslade.analyze'

    // Global jar configuration
    jar {
        doFirst {
            jar {
                manifest {
                    if (project.hasProperty('mainClassName')) {
                        attributes(
                                'Main-Class': project.mainClassName
                        )
                    }

                    attributes(
                            'Implementation-Name': project.name,
                            'Implementation-Version': project.version,
                            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
                    )
                }

                entryCompression ZipEntryCompression.STORED
            }
        }
    }

    ext {
        globalPlatformDir = new File(project.rootDir, 'platform')
        rsyncPlatformDir = new File(project(':libs:sx-rsync').projectDir, 'platform')

        buildSupplementalsDir = new File(project.buildDir, 'supplementals')
        buildPlatformDir = new File(buildSupplementalsDir, 'platform')
        projectPlatformDir = new File(project.projectDir, 'platform')
    }

    // Setup common sx-packager-gradle plugin properties for all subprojects
    plugins.withType(sx.packager.gradle.PackagerPlugin).whenPluginAdded {
        SshTunnelProvider mySshTunnelProvider = new SshTunnelProvider(
                new kotlin.ranges.IntRange(13300, 13350),
                new SshHost(
                        "",
                        13003,
                        "leoz",
                        "MhWLzHv0Z0E9hy8jAiBMRoO65qDBro2JH1csNlwGI3hXPY8P8NOY3NeRDHrApme8"))

        packager {
            sshTunnelProvider = mySshTunnelProvider
            bundleRepository = new BundleRepository(
                    new Rsync.URI("rsync://leoz@leoz.derkurier.de:13002/bundles"),
                    '2FBVQsfQqZOgpbSSipdZuatQCuaogyfYc9noFYRZO6gz3TwGRDLDiGXkRJ70yw5x',
                    mySshTunnelProvider)

            releaseBasePath = g_release_path
            osxIcon = g_osx_icon
            windowsIcon = g_windows_icon
            nativePlatformDir = new File(project(':libs:sx-rsync').projectDir, 'platform')
            supplementalPlatformDirs(
                    (buildPlatformDir): file('platform')
            )
        }
    }

    plugins.withType(DistributionPlugin).whenPluginAdded {
        project.gradle.projectsEvaluated {
            tasks.installDist {
                doLast {
                    def src = project.buildDir.toPath()
                            .resolve("install")
                            .resolve(project.name)

                    def dst = g_vm_dist_path
                            .toPath()
                            .resolve(project.name)

                    println("Moving [${src}] to [${dst}]")

                    if (Files.exists(dst)) dst.deleteDir()
                    Files.move(src, dst)
                }
            }
        }
    }

    /**
    * Task copying platform specific files from sx-common to project dir
    */
    task copyRsyncPlatformDirToProject(type: Copy) {
        from rsyncPlatformDir
        into projectPlatformDir
        // Rename generic name to leoz specific process name, as it's easier to handle,
        // when eg. looking at process names while leoz is running
        rename 'sx-rsync(.*)', 'leoz-rsync$1'
    }

    /**
     * Task copying platform specific files from sx-common to project build dir
     */
    task copyRsyncPlatformDirToBuild(type: Copy) {
        from rsyncPlatformDir
        into buildPlatformDir
        // Rename generic name to leoz specific process name, as it's easier to handle,
        // when eg. looking at process names while leoz is running
        rename 'sx-rsync(.*)', 'leoz-rsync$1'
    }
    tasks.copyRsyncPlatformDirToBuild.dependsOn(tasks.copyRsyncPlatformDirToProject)

    /**
     * Task copying architecture specific global files to project dri
     */
    task copyGlobalPlatformDirToProject(type: Copy) {
        from globalPlatformDir
        into projectPlatformDir
    }

    /**
     * Task copying architecture specific global files to project build dir
     */
    task copyGlobalPlatformDirToBuild(type: Copy) {
        from globalPlatformDir
        into buildPlatformDir
    }
    tasks.copyGlobalPlatformDirToBuild.dependsOn(tasks.copyGlobalPlatformDirToProject)
}
