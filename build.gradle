import sx.platform.PlatformId

import java.lang.management.ManagementFactory
import java.nio.file.Paths

version = '0.1'

apply from: 'versions.gradle'

def assertJvmVersion(String vmVersion) {
    def jvm = ManagementFactory.getRuntimeMXBean()
    println("JVM version [${jvm.specVersion}] [${jvm.vmVersion}]")
    if (!jvm.vmVersion.startsWith(vmVersion))
        throw new IllegalStateException("JVM/JDK version should match [${vmVersion}]")
}

assertJvmVersion(v_jvm)

buildscript {
    ext {
        // Leoz release path, relative to root project
        g_platform_identifier = PlatformId.current().toString()

        g_release_path = Paths.get(project.rootDir.toURI())
                .resolve("release")
                .toFile()

        g_bin_path = new File(project.rootDir, 'bin')

        g_osx_icon = Paths.get(project.rootDir.toURI())
                .resolve('images')
                .resolve('DEKU.icon.icns')
                .toFile()

        g_windows_icon = Paths.get(project.rootDir.toURI())
                .resolve('images')
                .resolve('DEKU.icon.ico')
                .toFile()
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "ca.cutterslade.gradle:gradle-dependency-analyze:1.1.0"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
    }
}

// Start parameters
// TODO. not available since gradle-2.14. may have to find another way
//gradle.startParameter.showStacktrace = ShowStacktrace.ALWAYS

// Common configuration for subprojects
subprojects {

    // Common subproject buildscript configuration
    buildscript {
        repositories {
            mavenCentral()
            jcenter()
        }
    }

    // Common plugins
    apply plugin: 'base'
    apply plugin: 'java'
    // For generating dependency reports
    apply plugin: 'project-report'
    // Analzye tasks (analyze* for showing unused dependencies eg.)
    apply plugin: 'ca.cutterslade.analyze'
    // Plugin for showing dependency updates
    apply plugin: 'com.github.ben-manes.versions'

    // Global repositories
    repositories {
        mavenCentral()
        jcenter()
    }

    test {
        testLogging.showStandardStreams = true
    }

    // Global jar configuration
    jar {
        doFirst {
            jar {
                manifest {
                    if (project.hasProperty('mainClassName')) {
                        attributes(
                                'Main-Class': project.mainClassName
                        )
                    }

                    attributes(
                            'Implementation-Name': project.name,
                            'Implementation-Version': project.version,
                            'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
                    )
                }

                entryCompression ZipEntryCompression.STORED
            }
        }
    }

    ext {
        globalPlatformDir = new File(project.rootDir, 'platform')
        sxRsyncPlatformDir = new File(project(':libs:sx-rsync').projectDir, 'platform')

        projectBuildSupplementalsDir = new File(project.buildDir, 'supplementals')
        projectBuildPlatformDir = new File(projectBuildSupplementalsDir, 'platform')
        projectBuildCurrentPlatformDir = new File(projectBuildPlatformDir, g_platform_identifier)
        platformDirRelative = new File('platform')

        projectPlatformDir = new File(project.projectDir, 'platform')
    }

    /**
     * Task copying platform specific files from sx-common to project dir
     */
    task copySxPlatformDirToProject(type: Copy) {
        from sxRsyncPlatformDir
        into projectPlatformDir
        // Rename generic name to leoz specific process name, as it's easier to handle,
        // when eg. looking at process names while leoz is running
        rename 'sx-rsync(.*)', 'leoz-rsync$1'
    }

    /**
     * Task copying platform specific files from sx-common to project build dir
     */
    task copySxPlatformDirToBuild(type: Copy) {
        from sxRsyncPlatformDir
        into projectBuildPlatformDir
        // Rename generic name to leoz specific process name, as it's easier to handle,
        // when eg. looking at process names while leoz is running
        rename 'sx-rsync(.*)', 'leoz-rsync$1'
    }
    tasks.copySxPlatformDirToBuild.dependsOn(tasks.copySxPlatformDirToProject)

    /**
     * Task copying architecture specific global files to project dri
     */
    task copyGlobalPlatformDirToProject(type: Copy) {
        from globalPlatformDir
        into projectPlatformDir
    }

    /**
     * Task copying architecture specific global files to project build dir
     */
    task copyGlobalPlatformDirToBuild(type: Copy) {
        from globalPlatformDir
        into projectBuildPlatformDir
    }
    tasks.copyGlobalPlatformDirToBuild.dependsOn(tasks.copyGlobalPlatformDirToProject)
}

